This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
__checks__/
  other-scrape.check.ts
  rain-scrape.check.ts
.github/
  workflows/
    build-and-test.yml
    codeql-analysis.yml
    playwright.yml
apps/
  android/
    assetlinks.json
    Readme.html
    signing-key-info.txt
e2e/
  api/
    scrape/
      radar_api.spec.ts
      region_api.spec.ts
      satellite_api.spec.ts
      upperair_api.spec.ts
  home_page.spec.ts
  radar_page.spec.ts
  satellite_page.spec.ts
  upper_air_page.spec.ts
public/
  .well-known/
    assetlinks.json
  manifest.json
  robots.txt
  sitemap.xml
  vercel.svg
scripts/
  scrape-all.sh
src/
  app/
    api/
      inngest/
        route.ts
      scrape/
        radar/
          route.ts
        regions/
          [name]/
            route.ts
          remove/
            [name]/
              route.ts
          upload/
            [name]/
              route.ts
        satellite/
          route.ts
        upper-air/
          route.ts
    offline/
      page.tsx
    radar/
      [code]/
        loading.tsx
        page.tsx
    regions/
      [name]/
        error.tsx
        loading.tsx
        page.tsx
        state.ts
    satellite/
      loading.tsx
      page.tsx
    upperair/
      [[...balloon]]/
        loading.tsx
        page.tsx
    globals.css
    layout.tsx
    page.tsx
    sw.ts
  components/
    AnimatedWeatherChart/
      animated-weather-chart.tsx
    Atoms/
      GlobalState.ts
    Footer/
      Footer.tsx
      index.ts
    FooterControl/
      index.tsx
    GeneralError/
      GeneralError.tsx
      index.ts
    GoogleTag/
      GoogleTag.tsx
      index.ts
    Hooks/
      useIsStandalone.ts
      usePreloadedImages.ts
    Navbar/
      components/
        DropDown.test.tsx
        DropDown.tsx
        HamburgerSvg.tsx
        MetvuwMobileImage.tsx
      index.ts
      NavBar.test.tsx
      NavBar.tsx
      types.ts
    RadarAndSatelliteImages/
      AnimatedRadarAndSatelliteImageCard.tsx
      RadarAndSatelliteImageCard.tsx
      RadarAndSatelliteImages.tsx
    RadarPage/
      index.ts
      RadarPage.tsx
    RegionPage/
      region-page.tsx
    SatellitePage/
      index.ts
      SatellitePage.tsx
    SubHeader/
      index.ts
      SubHeader.tsx
    UpperAirPage/
      index.ts
      UpperAirPage.tsx
    WeatherCharts/
      Skeleton.tsx
      WeatherChart.tsx
      WeatherChartsWithAnimation.test.tsx
      WeatherChartsWithAnimation.tsx
    WeatherImage/
      __snapshots__/
        WeatherImage.test.tsx.snap
      index.ts
      WeatherImage.test.tsx
      WeatherImage.tsx
    Card.tsx
    NoForecast.tsx
  inngest/
    cronFunctions/
      pollingCronSchedule.ts
      radarPoller.ts
      rainPoller.ts
      satellitePoller.ts
      upperAirPoller.ts
    functions/
      removeImages.ts
      scrapeRegion.ts
      uploadImages.ts
    client.ts
  shared/
    db/
      database.types.ts
      serviceRoleDb.ts
    helpers/
      v2/
        chartData/
          constructChartData.test.ts
          constructChartData.ts
          constructRainChartData.test.ts
          constructRainChartData.ts
        imageCompression/
          compressRadarImage.ts
          compressRainImage.ts
          compressSatelliteImage.ts
          compressUpperAirImage.ts
          getCompressorForChart.ts
          imageDimensions.ts
        imageStorage/
          defaults.ts
          determineImagesToAdd.test.ts
          determineImagesToAdd.ts
          downloadAndUpload.ts
          downloadImageToBuffer.ts
          index.ts
          removeImagesFromStorage.ts
          retrieveImagesFromStorage.ts
          uploadImagesToStorage.ts
        screenScraper/
          imagePipeline.ts
          index.js
          loadImages.ts
          scrapedImage.ts
          scrapeRadarImages.ts
          scrapeRainImages.ts
          scrapeSatelliteImages.ts
          scrapeUpperAirImages.ts
      generateSEOMetadata.ts
      images.ts
    types/
      balloonLocations.test.ts
      balloonLocations.ts
      cacheRequestResult.ts
      chartData.ts
      ChartType.ts
      radarChartData.ts
      radarRegions.ts
      rainChartData.ts
      region.ts
      satelliteChartData.ts
      ScrapeResult.ts
      storageImage.ts
      upperAirChartData.ts
  config.ts
styles/
  globals.css
supabase/
  migrations/
    20240408033211_Initial-Schema.sql
    20240408033341_Create_TriggerTable_WebHook.sql
    20240409195552_Add_trigger_key_column_to_tables.sql
    20240410054358_modify_primary_keys_on_image_tables.sql
    20240412055022_remove_old_tables.sql
  .gitignore
  config.toml
testing/
  html/
    nzRegion.ts
    satellite.ts
  nz.ts
tests-examples/
  demo-todo-app.spec.ts
.eslintrc.js
.gitignore
.prettierignore
.prettierrc.json
checkly.config.ts
GEMINI.md
importJestDOM.ts
instrumentation.ts
jest.config.mjs
jest.setup.js
next-env.d.ts
next.config.ts
package.json
playwright.config.ts
postcss.config.js
README.md
renovate.json
server.js
tailwind.config.js
tsconfig.json
vercel.json
vitest.config.ts
vitest.setup.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="__checks__/other-scrape.check.ts">
/**
 * This is a Checkly CLI ApiCheck construct. To learn more, visit:
 * - https://www.checklyhq.com/docs/cli/
 * - https://www.checklyhq.com/docs/cli/constructs-reference/#apicheck
 */

import { ApiCheck, Frequency, RetryStrategyBuilder } from 'checkly/constructs'

const endpoints = ['satellite', 'radar', 'upper-air']
for (const endpoint of endpoints) {
  new ApiCheck(`scrape-${endpoint}`, {
    name: `Scrape ${endpoint}`,
    activated: false,
    muted: false,
    shouldFail: false,
    runParallel: false,
    locations: [],
    tags: [],
    frequency: Frequency.EVERY_6H,
    environmentVariables: [],
    // group: your check belongs to group 'Update Cache',
    maxResponseTime: 20000,
    degradedResponseTime: 5000,
    request: {
      url: `https://metvuwmobile.com/api/scrape/${endpoint}`,
      method: 'GET',
      followRedirects: true,
      skipSSL: false,
      assertions: [],
      body: ``,
      bodyType: 'NONE',
      headers: [],
      queryParameters: [],
      basicAuth: {
        username: '',
        password: '',
      },
    },
    retryStrategy: RetryStrategyBuilder.fixedStrategy({
      baseBackoffSeconds: 0,
      maxRetries: 1,
      maxDurationSeconds: 600,
      sameRegion: false,
    }),
  })
}
</file>

<file path="__checks__/rain-scrape.check.ts">
// noinspection ES6PreferShortImport

/**
 * This is a Checkly CLI ApiCheck construct. To learn more, visit:
 * - https://www.checklyhq.com/docs/cli/
 * - https://www.checklyhq.com/docs/cli/constructs-reference/#apicheck
 */

import { ApiCheck, Frequency, RetryStrategyBuilder } from 'checkly/constructs'

import { regions } from '../src/shared/types/region'

for (const region of regions) {
  new ApiCheck(`scrape-${region.code}`, {
    name: `Scrape ${region.name}`,
    activated: false,
    muted: false,
    shouldFail: false,
    runParallel: false,
    locations: [],
    tags: [],
    frequency: Frequency.EVERY_6H,
    environmentVariables: [],
    // group: your check belongs to group 'Update Cache',
    maxResponseTime: 20000,
    degradedResponseTime: 5000,
    request: {
      url: `https://metvuwmobile.com/api/scrape/rain/${region.code}`,
      method: 'GET',
      followRedirects: true,
      skipSSL: false,
      assertions: [],
      body: ``,
      bodyType: 'NONE',
      headers: [],
      queryParameters: [],
      basicAuth: {
        username: '',
        password: '',
      },
    },
    retryStrategy: RetryStrategyBuilder.fixedStrategy({
      baseBackoffSeconds: 0,
      maxRetries: 1,
      maxDurationSeconds: 600,
      sameRegion: false,
    }),
  })
}
</file>

<file path=".github/workflows/codeql-analysis.yml">
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ main ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ main ]
  schedule:
    - cron: '19 23 * * 5'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
</file>

<file path=".github/workflows/playwright.yml">
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test_setup:
    name: Test setup
    runs-on: ubuntu-latest
    outputs:
      preview_url: ${{ steps.waitForVercelPreviewDeployment.outputs.url }}
    steps:
      - name: Wait for Vercel preview deployment to be ready
        uses: patrickedqvist/wait-for-vercel-preview@v1.3.2
        id: waitForVercelPreviewDeployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          max_timeout: 600
  test_e2e:
    needs: test_setup
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: Run Playwright tests
      run: npx playwright test
      env:
        PLAYWRIGHT_TEST_BASE_URL: ${{ needs.test_setup.outputs.preview_url }}
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
</file>

<file path="apps/android/assetlinks.json">
[{
        "relation": ["delegate_permission/common.handle_all_urls"],
        "target" : { "namespace": "android_app", "package_name": "com.metvuwmobile.www.twa",
                     "sha256_cert_fingerprints": ["DD:DC:B6:F1:D2:C9:B5:81:C7:00:93:A2:FD:94:E4:06:E2:D7:11:E1:D8:1D:B3:CA:51:E4:D2:79:AC:9B:59:6A"] }
      }
]
</file>

<file path="apps/android/Readme.html">
<html>
    <body>
        <script>
            window.location = "https://github.com/pwa-builder/CloudAPK/blob/master/Next-steps.md";
        </script>
    </body>
</html>
</file>

<file path="apps/android/signing-key-info.txt">
Keep your this file and signing.keystore in a safe place. You'll need these files if you want to upload future versions of your PWA to the Google Play Store.

Key store file: signing.keystore
Key store password: 81WgSAiWcsAw
Key alias: my-key-alias
Key password: lywumOzOfvT2
Signer's full name: John Doe
Signer's organization: My Company
Signer's organizational unit: Engineering
Signer's country code: US
</file>

<file path="e2e/api/scrape/radar_api.spec.ts">
import { expect, test } from '@playwright/test'

test.describe.skip('radar api spec', () => {
  test('requesting radar should return a 200 response', async ({ request }) => {
    const cacheResponse = await request.get(`/api/scrape/radar`)
    expect(cacheResponse.ok()).toBeTruthy()
  })
})
</file>

<file path="e2e/api/scrape/region_api.spec.ts">
import { expect, test } from '@playwright/test'

import { regions } from '@/shared/types/region'

test.describe.skip('region api spec', () => {
  test('requesting for a valid region should return a 200 response', async ({
    request,
  }) => {
    const cacheResponse = await request.get(`/api/scrape/rain/nz`)
    expect(cacheResponse.ok()).toBeTruthy()
  })

  for (const region of regions) {
    test(`requesting for region ${region.code} should return a 200 response `, async ({
      request,
    }) => {
      const cacheResponse = await request.get(`/api/scrape/rain/${region.code}`)
      expect(cacheResponse.ok()).toBeTruthy()
    })
  }

  test('requesting for an invalid region should return a 404 response', async ({
    request,
  }) => {
    const cacheResponse = await request.get(`/api/scrape/rain/foobaa`)
    expect(cacheResponse.status()).toBe(404)

    expect(await cacheResponse.text()).toEqual('invalid region code: foobaa')
  })

  test('requesting with no region should return a 404 response', async ({
    request,
  }) => {
    const cacheResponse = await request.get(`/api/scrape`)
    expect(cacheResponse.status()).toBe(404)
  })
})
</file>

<file path="e2e/api/scrape/satellite_api.spec.ts">
import { expect, test } from '@playwright/test'

test.describe.skip('satellite api spec', () => {
  test('requesting satellite should return a 200 response', async ({
    request,
  }) => {
    const cacheResponse = await request.get(`/api/scrape/satellite`)
    expect(cacheResponse.ok()).toBeTruthy()
  })
})
</file>

<file path="e2e/api/scrape/upperair_api.spec.ts">
import { expect, test } from '@playwright/test'

test.describe.skip('radar api spec', () => {
  test('requesting radar should return a 200 response', async ({ request }) => {
    const cacheResponse = await request.get(`/api/scrape/upper-air`)
    expect(cacheResponse.ok()).toBeTruthy()
  })
})
</file>

<file path="public/.well-known/assetlinks.json">
[{
        "relation": ["delegate_permission/common.handle_all_urls"],
        "target" : { "namespace": "android_app", "package_name": "com.metvuwmobile.www.twa",
                     "sha256_cert_fingerprints": ["DD:DC:B6:F1:D2:C9:B5:81:C7:00:93:A2:FD:94:E4:06:E2:D7:11:E1:D8:1D:B3:CA:51:E4:D2:79:AC:9B:59:6A"] }
      }
]
</file>

<file path="public/robots.txt">
# Allow all user agents.
User-agent: *
Allow: /
</file>

<file path="public/sitemap.xml">
<?xml version="1.0" encoding="UTF-8"?>
<urlset
      xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9
            http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">
<!-- created with Free Online Sitemap Generator www.xml-sitemaps.com -->


<url>
  <loc>https://www.metvuwmobile.com/</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>1.00</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/nz</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/nzni</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/nzsi</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/victoria</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/nsw</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/waussie</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/swaussie</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/queensland</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/saussie</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/seaussie</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/newcaledonia</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/fiji</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/swp</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/ocean</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/europe</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/uk</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/estonia</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/turkey</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/world</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/satlantic</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/natlantic</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/usa</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/japan</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>
<url>
  <loc>https://www.metvuwmobile.com/regions/safrica</loc>
  <lastmod>2021-06-30T01:54:01+00:00</lastmod>
  <priority>0.80</priority>
</url>


</urlset>
</file>

<file path="public/vercel.svg">
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
</file>

<file path="src/app/api/inngest/route.ts">
import { serve } from 'inngest/next'

import { config } from '@/config'
import { inngest } from '@/inngest/client'
import { radarPoller } from '@/inngest/cronFunctions/radarPoller'
import { rainPoller } from '@/inngest/cronFunctions/rainPoller'
import { satellitePoller } from '@/inngest/cronFunctions/satellitePoller'
import { upperAirPoller } from '@/inngest/cronFunctions/upperAirPoller'
import { removeImages } from '@/inngest/functions/removeImages'
import { scrapeRegion } from '@/inngest/functions/scrapeRegion'
import { uploadImages } from '@/inngest/functions/uploadImages'

const functions =
  config.environment === 'preview'
    ? []
    : [
        rainPoller,
        radarPoller,
        satellitePoller,
        upperAirPoller,
        removeImages,
        uploadImages,
        scrapeRegion,
      ]
// Create an API that serves zero functions
export const { GET, POST, PUT } = serve({
  client: inngest,
  functions,
})
</file>

<file path="src/app/api/scrape/radar/route.ts">
import { NextResponse } from 'next/server'

import { config } from '@/config'
import {
  calculateImagesToDownload,
  calculateImagesToRemove,
  retrieveImagesFromStorage,
} from '@/shared/helpers/v2/imageStorage'
import { downloadAndUpload } from '@/shared/helpers/v2/imageStorage/downloadAndUpload'
import { removeImagesFromStorage } from '@/shared/helpers/v2/imageStorage/removeImagesFromStorage'
import { scrapeRadarImages } from '@/shared/helpers/v2/screenScraper'

export async function POST() {
  const newImages = await scrapeRadarImages()

  const existingImages = await retrieveImagesFromStorage('images/radar')

  const toRemove = calculateImagesToRemove(newImages, existingImages)

  const toDownload = calculateImagesToDownload(newImages, existingImages)

  await removeImagesFromStorage(config.supbabaseBucketName, toRemove)

  await Promise.all(
    toDownload.map(async (image) =>
      downloadAndUpload(config.supbabaseBucketName, 'Radar', image),
    ),
  )

  return NextResponse.json({
    ok: true,
    toAdd: toDownload.map((img) => ({
      fullStoragePath: img.fullStoragePath,
      imageFileName: img.imageFileName,
    })),
    toRemove: toRemove,
  })
}
</file>

<file path="src/app/api/scrape/regions/[name]/route.ts">
import { NextRequest, NextResponse } from 'next/server'

import { config } from '@/config'
import {
  calculateImagesToDownload,
  calculateImagesToRemove,
  retrieveImagesFromStorage,
} from '@/shared/helpers/v2/imageStorage'
import { downloadAndUpload } from '@/shared/helpers/v2/imageStorage/downloadAndUpload'
import { removeImagesFromStorage } from '@/shared/helpers/v2/imageStorage/removeImagesFromStorage'
import { scrapeRainImages } from '@/shared/helpers/v2/screenScraper'
import { findRegionByCode } from '@/shared/types/region'

export async function POST(
  _request: NextRequest,
  props: { params: Promise<{ name: string }> },
) {
  const params = await props.params
  const regionCode = params.name ?? 'nz'

  const region = findRegionByCode(regionCode)

  if (!region)
    return new NextResponse(`invalid region code: ${regionCode}`, {
      status: 404,
    })

  const newImages = await scrapeRainImages(region)
  const existingImages = await retrieveImagesFromStorage(
    `images/rain/${regionCode}`,
  )

  const toRemove = calculateImagesToRemove(newImages, existingImages)

  await removeImagesFromStorage(config.supbabaseBucketName, toRemove)

  const toDownload = calculateImagesToDownload(newImages, existingImages)

  await Promise.all(
    toDownload.map(async (image) =>
      downloadAndUpload(config.supbabaseBucketName, 'Rain', image),
    ),
  )

  return NextResponse.json({
    ok: true,
    toAdd: toDownload.map((img) => ({
      fullStoragePath: img.fullStoragePath,
      imageFileName: img.imageFileName,
    })),
    toRemove: toRemove,
  })
}
</file>

<file path="src/app/api/scrape/regions/remove/[name]/route.ts">
import { NextRequest, NextResponse } from 'next/server'

import { config } from '@/config'
import {
  calculateImagesToRemove,
  retrieveImagesFromStorage,
} from '@/shared/helpers/v2/imageStorage'
import { removeImagesFromStorage } from '@/shared/helpers/v2/imageStorage/removeImagesFromStorage'
import { scrapeRainImages } from '@/shared/helpers/v2/screenScraper'
import { findRegionByCode } from '@/shared/types/region'

export async function POST(
  _request: NextRequest,
  props: { params: Promise<{ name: string }> },
) {
  const params = await props.params
  const regionCode = params.name ?? 'nz'

  const region = findRegionByCode(regionCode)

  if (!region)
    return new NextResponse(`invalid region code: ${regionCode}`, {
      status: 404,
    })

  const newImages = await scrapeRainImages(region)
  const existingImages = await retrieveImagesFromStorage(
    `images/rain/${regionCode}`,
  )

  const toRemove = calculateImagesToRemove(newImages, existingImages)

  await removeImagesFromStorage(config.supbabaseBucketName, toRemove)

  return NextResponse.json({
    ok: true,

    toRemove: toRemove,
  })
}
</file>

<file path="src/app/api/scrape/regions/upload/[name]/route.ts">
import { NextRequest, NextResponse } from 'next/server'

import { config } from '@/config'
import {
  calculateImagesToDownload,
  retrieveImagesFromStorage,
} from '@/shared/helpers/v2/imageStorage'
import { downloadAndUpload } from '@/shared/helpers/v2/imageStorage/downloadAndUpload'
import { scrapeRainImages } from '@/shared/helpers/v2/screenScraper'
import { findRegionByCode } from '@/shared/types/region'

export async function POST(
  _request: NextRequest,
  props: { params: Promise<{ name: string }> },
) {
  const params = await props.params
  const regionCode = params.name ?? 'nz'

  const region = findRegionByCode(regionCode)

  if (!region)
    return new NextResponse(`invalid region code: ${regionCode}`, {
      status: 404,
    })

  const newImages = await scrapeRainImages(region)
  const existingImages = await retrieveImagesFromStorage(
    `images/rain/${regionCode}`,
  )

  const toDownload = calculateImagesToDownload(newImages, existingImages)

  await Promise.all(
    toDownload.map(async (image) =>
      downloadAndUpload(config.supbabaseBucketName, 'Rain', image),
    ),
  )

  return NextResponse.json({
    ok: true,
    toAdd: toDownload.map((img) => ({
      fullStoragePath: img.fullStoragePath,
      imageFileName: img.imageFileName,
    })),
  })
}
</file>

<file path="src/app/api/scrape/satellite/route.ts">
import { NextResponse } from 'next/server'

import { config } from '@/config'
import {
  calculateImagesToDownload,
  calculateImagesToRemove,
  retrieveImagesFromStorage,
} from '@/shared/helpers/v2/imageStorage'
import { downloadAndUpload } from '@/shared/helpers/v2/imageStorage/downloadAndUpload'
import { removeImagesFromStorage } from '@/shared/helpers/v2/imageStorage/removeImagesFromStorage'
import { scrapeSatelliteImages } from '@/shared/helpers/v2/screenScraper'

export async function POST() {
  const newImages = await scrapeSatelliteImages()

  const existingImages = await retrieveImagesFromStorage('images/satellite')

  const toRemove = calculateImagesToRemove(newImages, existingImages)

  await removeImagesFromStorage(config.supbabaseBucketName, toRemove)

  const toDownload = calculateImagesToDownload(newImages, existingImages)

  await Promise.all(
    toDownload.map(async (image) =>
      downloadAndUpload(config.supbabaseBucketName, 'Satellite', image),
    ),
  )

  return NextResponse.json({
    ok: true,
    toAdd: toDownload.map((img) => ({
      fullStoragePath: img.fullStoragePath,
      imageFileName: img.imageFileName,
    })),
    toRemove: toRemove,
  })
}
</file>

<file path="src/app/api/scrape/upper-air/route.ts">
import { NextResponse } from 'next/server'

import { config } from '@/config'
import {
  calculateImagesToDownload,
  calculateImagesToRemove,
  retrieveImagesFromStorage,
} from '@/shared/helpers/v2/imageStorage'
import { downloadAndUpload } from '@/shared/helpers/v2/imageStorage/downloadAndUpload'
import { removeImagesFromStorage } from '@/shared/helpers/v2/imageStorage/removeImagesFromStorage'
import { scrapeUpperAirImages } from '@/shared/helpers/v2/screenScraper'

export async function POST() {
  const newImages = await scrapeUpperAirImages()

  const existingImages = await retrieveImagesFromStorage('images/upper-air')

  const toRemove = calculateImagesToRemove(newImages, existingImages)

  const toDownload = calculateImagesToDownload(newImages, existingImages)

  await removeImagesFromStorage(config.supbabaseBucketName, toRemove)

  await Promise.all(
    toDownload.map(async (image) =>
      downloadAndUpload(config.supbabaseBucketName, 'Upper Air', image),
    ),
  )

  return NextResponse.json({
    ok: true,
    toAdd: toDownload.map((img) => ({
      fullStoragePath: img.fullStoragePath,
      imageFileName: img.imageFileName,
    })),
    toRemove: toRemove,
  })
}
</file>

<file path="src/app/radar/[code]/loading.tsx">
import SubHeader from '@/components/SubHeader'
import { WeatherChartSkeleton } from '@/components/WeatherCharts/Skeleton'
import { radarImageDimensions } from '@/shared/helpers/v2/imageCompression/imageDimensions'

export default function Loading() {
  return (
    <>
      <SubHeader submenuText="Loading radar data" />
      <ul className="flex flex-col items-center">
        <WeatherChartSkeleton
          width={radarImageDimensions.width}
          height={radarImageDimensions.height}
        />
        <WeatherChartSkeleton
          width={radarImageDimensions.width}
          height={radarImageDimensions.height}
        />
        <WeatherChartSkeleton
          width={radarImageDimensions.width}
          height={radarImageDimensions.height}
        />
      </ul>
    </>
  )
}
</file>

<file path="src/app/radar/[code]/page.tsx">
import type { Metadata } from 'next'
import { notFound } from 'next/navigation'

import NoForecast from '@/components/NoForecast'
import { RadarPage } from '@/components/RadarPage'
import generateSEOMetadata from '@/shared/helpers/generateSEOMetadata'
import { constructChartData } from '@/shared/helpers/v2/chartData/constructChartData'
import { retrieveImagesFromStorage } from '@/shared/helpers/v2/imageStorage'
import { isRadarCode } from '@/shared/types/radarRegions'

type Props = {
  params: Promise<{ code: string }>
}
export const dynamic = 'force-dynamic'

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  // read route params
  const code = (await params).code

  return generateSEOMetadata({
    title: `metvuw mobile | Radar`,
    description: `Radar charts. Optimized for mobile devices. Sourced from metvuw.com`,
    url: `radar/${code}`,
  })
}
export default async function Page(props: {
  params: Promise<{ code: string }>
}) {
  const params = await props.params
  if (!isRadarCode(params.code)) {
    return notFound()
  }

  const path = `images/radar/${params.code}`

  const existingImages = await retrieveImagesFromStorage(path)

  if (existingImages.length === 0) {
    return <NoForecast />
  }

  const radarData = constructChartData(existingImages)

  return <RadarPage radarData={radarData} radarCode={params.code} />
}
</file>

<file path="src/app/regions/[name]/error.tsx">
'use client' // Error components must be Client Components

import GeneralError from '@/components/GeneralError'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return <GeneralError error={error} reset={reset} />
}
</file>

<file path="src/app/regions/[name]/page.tsx">
import { Metadata } from 'next'
import { notFound } from 'next/navigation'

import NoForecast from '@/components/NoForecast'
import RegionPage from '@/components/RegionPage/region-page'
import generateSEOMetadata from '@/shared/helpers/generateSEOMetadata'
import { constructRainChartData } from '@/shared/helpers/v2/chartData/constructRainChartData'
import { retrieveImagesFromStorage } from '@/shared/helpers/v2/imageStorage'
import { findRegionByCode } from '@/shared/types/region'

export const dynamic = 'force-dynamic'

export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params
  // read route params
  const regionName = params.name
  return generateSEOMetadata({
    title: `metvuw mobile | ${regionName}`,
    description: `metvuw ${regionName} wind & rain forecast charts. Optimized for mobile devices. Sourced from metvuw.com`,
    url: `regions/${regionName}`,
  })
}

interface Props {
  params: Promise<{ name: string }>
}

export default async function Region(props: Props) {
  const params = await props.params
  const matchedRegion = findRegionByCode(params.name)

  if (!matchedRegion) {
    // Redirect to a 404 page if the region is not found
    return notFound()
  }

  const path = `images/rain/${matchedRegion.code}`
  const existingImages = await retrieveImagesFromStorage(path)

  if (existingImages.length === 0) {
    return <NoForecast />
  }

  const rainChartData = constructRainChartData(existingImages)

  const sortedCharts = rainChartData.sort((a, b) => {
    return (
      new Date(a.imageDateUTC).getTime() - new Date(b.imageDateUTC).getTime()
    )
  })

  return <RegionPage region={matchedRegion} rainChartData={sortedCharts} />
}
</file>

<file path="src/app/satellite/loading.tsx">
// import { WeatherChartSkeleton } from '@/components/WeatherCharts/Skeleton'

import SubHeader from '@/components/SubHeader'
import { WeatherChartSkeleton } from '@/components/WeatherCharts/Skeleton'
import { satelliteImageDimensions } from '@/shared/helpers/v2/imageCompression/imageDimensions'

export default function Loading() {
  return (
    <>
      <SubHeader submenuText="Loading satellite data" />
      <ul className="flex flex-col items-center">
        <WeatherChartSkeleton
          width={satelliteImageDimensions.width}
          height={satelliteImageDimensions.height}
        />
        <WeatherChartSkeleton
          width={satelliteImageDimensions.width}
          height={satelliteImageDimensions.height}
        />
        <WeatherChartSkeleton
          width={satelliteImageDimensions.width}
          height={satelliteImageDimensions.height}
        />
      </ul>
    </>
  )
}
</file>

<file path="src/app/satellite/page.tsx">
import { Metadata } from 'next'

import NoForecast from '@/components/NoForecast'
import { SatellitePage } from '@/components/SatellitePage'
import { config } from '@/config'
import generateSEOMetadata from '@/shared/helpers/generateSEOMetadata'
import { constructChartData } from '@/shared/helpers/v2/chartData/constructChartData'
import { retrieveImagesFromStorage } from '@/shared/helpers/v2/imageStorage'

export const dynamic = 'force-dynamic'

export const generateMetadata = async (): Promise<Metadata> =>
  generateSEOMetadata({
    description: `Satellite wind & rain forecast charts. Optimized for mobile devices. Sourced from metvuw.com`,
    title: `metvuw mobile | Satellite`,
    url: new URL('satellite', config.baseUrl).href,
  })

export default async function Page() {
  const path = 'images/satellite'

  const existingImages = await retrieveImagesFromStorage(path)

  if (existingImages.length === 0) {
    return <NoForecast />
  }

  const satelliteData = constructChartData(existingImages)

  return <SatellitePage satelliteData={satelliteData} />
}
</file>

<file path="src/app/upperair/[[...balloon]]/loading.tsx">
import SubHeader from '@/components/SubHeader'
import { WeatherChartSkeleton } from '@/components/WeatherCharts/Skeleton'
import { upperAirImageDimensions } from '@/shared/helpers/v2/imageCompression/imageDimensions'

export default function Loading() {
  return (
    <>
      <SubHeader submenuText="Loading upper air data" />
      <ul className="flex flex-col items-center">
        <WeatherChartSkeleton
          width={upperAirImageDimensions.width}
          height={upperAirImageDimensions.height}
        />
        <WeatherChartSkeleton
          width={upperAirImageDimensions.width}
          height={upperAirImageDimensions.height}
        />
        <WeatherChartSkeleton
          width={upperAirImageDimensions.width}
          height={upperAirImageDimensions.height}
        />
      </ul>
    </>
  )
}
</file>

<file path="src/app/upperair/[[...balloon]]/page.tsx">
import { Metadata } from 'next'
import { notFound } from 'next/navigation'

import NoForecast from '@/components/NoForecast'
import { UpperAirPage } from '@/components/UpperAirPage'
import generateSEOMetadata from '@/shared/helpers/generateSEOMetadata'
import { constructChartData } from '@/shared/helpers/v2/chartData/constructChartData'
import { retrieveImagesFromStorage } from '@/shared/helpers/v2/imageStorage'
import { getsBalloonLocationCodeOrDefault } from '@/shared/types/balloonLocations'

export const dynamic = 'force-dynamic'

export async function generateMetadata(props: Props): Promise<Metadata> {
  const params = await props.params
  return generateSEOMetadata({
    title: `metvuw mobile | Upper Air Data`,
    description: `Upper Air Data Optimized for mobile devices. Sourced from metvuw.com`,
    url: `upperair/${getsBalloonLocationCodeOrDefault(params.balloon?.at(0))}`,
  })
}
interface Props {
  params: Promise<{ balloon?: string[] }>
}

export default async function Page(props: Props) {
  const params = await props.params

  const balloonLocationCode = getsBalloonLocationCodeOrDefault(
    params.balloon?.at(0),
  )

  if (balloonLocationCode == false) {
    // Redirect to a 404 page if the region is not found
    return notFound()
  }

  const path = `images/upper-air/${balloonLocationCode}`

  const existingImages = await retrieveImagesFromStorage(path)

  const chartData = constructChartData(existingImages)

  if (existingImages.length === 0) {
    return <NoForecast />
  }

  return (
    <UpperAirPage balloonCode={balloonLocationCode} chartData={chartData} />
  )
}
</file>

<file path="src/app/globals.css">
@import 'tailwindcss';

@config "../../tailwind.config.js";
</file>

<file path="src/app/page.tsx">
import { Metadata } from 'next'
import { notFound } from 'next/navigation'

import NoForecast from '@/components/NoForecast'
import RegionPage from '@/components/RegionPage/region-page'
import { config } from '@/config'
import generateSEOMetadata from '@/shared/helpers/generateSEOMetadata'
import { constructRainChartData } from '@/shared/helpers/v2/chartData/constructRainChartData'
import { retrieveImagesFromStorage } from '@/shared/helpers/v2/imageStorage'
import { findRegionByCode } from '@/shared/types/region'

export const dynamic = 'force-dynamic'

export async function generateMetadata(): Promise<Metadata> {
  // read route params
  const regionName = 'nz'
  return generateSEOMetadata({
    title: `metvuw mobile | ${regionName}`,
    description: `metvuw ${regionName} wind & rain forecast charts. Optimized for mobile devices. Sourced from metvuw.com`,
    url: `${config.baseUrl}`,
  })
}

export default async function Page() {
  const matchedRegion = findRegionByCode('nz')
  if (!matchedRegion) {
    // Redirect to a 404 page if the region is not found
    return notFound()
  }
  const path = `images/rain/nz`

  const existingImages = await retrieveImagesFromStorage(path)

  if (existingImages.length === 0) {
    return <NoForecast />
  }

  const rainChartData = constructRainChartData(existingImages)

  const sortedCharts = rainChartData.sort((a, b) => {
    return (
      new Date(a.imageDateUTC).getTime() - new Date(b.imageDateUTC).getTime()
    )
  })

  return <RegionPage region={matchedRegion} rainChartData={sortedCharts} />
}
</file>

<file path="src/components/Footer/index.ts">
import { Footer } from './Footer'

export default Footer
</file>

<file path="src/components/GeneralError/GeneralError.tsx">
'use client' // Error components must be Client Components

import { useEffect } from 'react'

export function GeneralError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    // eslint-disable-next-line no-console
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}
</file>

<file path="src/components/GeneralError/index.ts">
import { GeneralError } from './GeneralError'
export default GeneralError
</file>

<file path="src/components/GoogleTag/GoogleTag.tsx">
import Script from 'next/script'

export function GoogleTag() {
  return (
    <>
      <Script
        strategy="afterInteractive"
        src={`https://www.googletagmanager.com/gtag/js?id=${process.env.NEXT_PUBLIC_GOOGLE_ANALYTICS}`}
      ></Script>
      <Script id="google-analytics" strategy="afterInteractive">
        {` window.dataLayer = window.dataLayer || [];
              function gtag(){dataLayer.push(arguments);}
              gtag('js', new Date());

              gtag('config', '${process.env.NEXT_PUBLIC_GOOGLE_ANALYTICS}');
             `}
      </Script>
    </>
  )
}
</file>

<file path="src/components/GoogleTag/index.ts">
import { GoogleTag } from './GoogleTag'
export default GoogleTag
</file>

<file path="src/components/Navbar/components/DropDown.test.tsx">
// import { render } from '@testing-library/react'
// import DropDown from './DropDown'
// import { mapRegionToMenuLink } from '../NavBar'
// import { nzRegions } from '@shared/region'
//
describe('blah', () => {
  test('blah', () => {})
})
// describe('NavBar Component', () => {
//   test('should render correctly', () => {
//     const { container } = render(
//       <DropDown heading="My Heading" links={mapRegionToMenuLink(nzRegions)} />,
//     )
//
//     expect(container).toMatchSnapshot()
//   })
// })
</file>

<file path="src/components/Navbar/components/HamburgerSvg.tsx">
export function HamburgerSvg() {
  return (
    <svg
      className="h-6 w-6"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={2}
        d="M4 6h16M4 12h16M4 18h16"
      />
    </svg>
  )
}
</file>

<file path="src/components/Navbar/components/MetvuwMobileImage.tsx">
export function MetvuwMobileImage() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24pt"
      height="24pt"
      viewBox="0 0 24 24"
      version="1.1"
    >
      <g id="surface1">
        <path
          stroke="none"
          fillRule="nonzero"
          fill="rgb(100%,98.823529%,98.823529%)"
          fillOpacity="1"
          d="M 20.570312 6 C 18.679688 6 17.144531 7.539062 17.144531 9.429688 C 17.144531 9.902344 17.527344 10.285156 18 10.285156 C 18.472656 10.285156 18.855469 9.902344 18.855469 9.429688 C 18.855469 8.484375 19.625 7.714844 20.570312 7.714844 C 21.515625 7.714844 22.285156 8.484375 22.285156 9.429688 C 22.285156 10.375 21.515625 11.144531 20.570312 11.144531 L 0.925781 11.144531 C 0.453125 11.144531 0.0664062 11.527344 0.0664062 12 C 0.0664062 12.472656 0.453125 12.855469 0.925781 12.855469 L 20.570312 12.855469 C 22.460938 12.855469 24 11.320312 24 9.429688 C 24 7.539062 22.460938 6 20.570312 6 Z M 20.570312 6 "
        />
        <path
          stroke="none"
          fillRule="nonzero"
          fill="rgb(100%,98.823529%,98.823529%)"
          fillOpacity="1"
          d="M 12 2.570312 C 10.109375 2.570312 8.570312 4.109375 8.570312 6 C 8.570312 6.472656 8.953125 6.855469 9.429688 6.855469 C 9.902344 6.855469 10.285156 6.472656 10.285156 6 C 10.285156 5.054688 11.054688 4.285156 12 4.285156 C 12.945312 4.285156 13.714844 5.054688 13.714844 6 C 13.714844 6.945312 12.945312 7.714844 12 7.714844 L 0.855469 7.714844 C 0.382812 7.714844 0 8.097656 0 8.570312 C 0 9.042969 0.382812 9.429688 0.855469 9.429688 L 12 9.429688 C 13.890625 9.429688 15.429688 7.890625 15.429688 6 C 15.429688 4.109375 13.890625 2.570312 12 2.570312 Z M 12 2.570312 "
        />
        <path
          stroke="none"
          fillRule="nonzero"
          fill="rgb(100%,98.823529%,98.823529%)"
          fillOpacity="1"
          d="M 12 14.570312 L 0.855469 14.570312 C 0.382812 14.570312 0 14.957031 0 15.429688 C 0 15.902344 0.382812 16.285156 0.855469 16.285156 L 12 16.285156 C 12.945312 16.285156 13.714844 17.054688 13.714844 18 C 13.714844 18.945312 12.945312 19.714844 12 19.714844 C 11.054688 19.714844 10.285156 18.945312 10.285156 18 C 10.285156 17.527344 9.902344 17.144531 9.429688 17.144531 C 8.953125 17.144531 8.570312 17.527344 8.570312 18 C 8.570312 19.890625 10.109375 21.429688 12 21.429688 C 13.890625 21.429688 15.429688 19.890625 15.429688 18 C 15.429688 16.109375 13.890625 14.570312 12 14.570312 Z M 12 14.570312 "
        />
      </g>
    </svg>
  )
}
</file>

<file path="src/components/Navbar/index.ts">
import NavBar from './NavBar'
export default NavBar
</file>

<file path="src/components/Navbar/NavBar.test.tsx">
// import { render } from '@testing-library/react'
// import Navbar from './NavBar'

describe('blah', () => {
  test('blah', () => {})
})
// describe.skip('NavBar Component', () => {
//   test('should render correctly', () => {
//     const { container } = render(<Navbar />)
//
//     expect(container).toMatchSnapshot()
//   })
// })
</file>

<file path="src/components/Navbar/types.ts">
export interface MenuLink {
  key: string
  value: string
  href: string
}
</file>

<file path="src/components/RadarPage/index.ts">
export * from './RadarPage'
</file>

<file path="src/components/SatellitePage/index.ts">
export * from './SatellitePage'
</file>

<file path="src/components/SubHeader/index.ts">
import { SubHeader } from './SubHeader'
export default SubHeader
</file>

<file path="src/components/UpperAirPage/index.ts">
export * from './UpperAirPage'
</file>

<file path="src/components/WeatherCharts/Skeleton.tsx">
import Card from '@/components/Card'

export function WeatherChartSkeleton(props: { width: number; height: number }) {
  return (
    <Card
      isLoading={true}
      weatherImage={
        <div className="flex h-full w-full items-center justify-center rounded-xs bg-gray-300 dark:bg-gray-700">
          <div
            style={{ width: props.width, height: props.height }}
            className="flex items-center justify-center"
          >
            <svg
              className="h-10 w-10 text-gray-200 dark:text-gray-600"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="currentColor"
              viewBox="0 0 16 20"
            >
              <path d="M14.066 0H7v5a2 2 0 0 1-2 2H0v11a1.97 1.97 0 0 0 1.934 2h12.132A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.934-2ZM10.5 6a1.5 1.5 0 1 1 0 2.999A1.5 1.5 0 0 1 10.5 6Zm2.221 10.515a1 1 0 0 1-.858.485h-8a1 1 0 0 1-.9-1.43L5.6 10.039a.978.978 0 0 1 .936-.57 1 1 0 0 1 .9.632l1.181 2.981.541-1a.945.945 0 0 1 .883-.522 1 1 0 0 1 .879.529l1.832 3.438a1 1 0 0 1-.031.988Z" />
              <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.98 2.98 0 0 0 .13 5H5Z" />
            </svg>
          </div>
        </div>
      }
      date={
        <div className="h-6 w-52 rounded-full bg-gray-200 dark:bg-gray-700"></div>
      }
      time={
        <div className="h-6 w-20 rounded-full bg-gray-200 dark:bg-gray-700"></div>
      }
    />
  )
}
</file>

<file path="src/components/WeatherImage/index.ts">
import WeatherImage from './WeatherImage'
export default WeatherImage
</file>

<file path="src/components/WeatherImage/WeatherImage.test.tsx">
import { render } from '@testing-library/react'

import WeatherImage from './WeatherImage'

describe('Weather Image', () => {
  test('it should render correctly', () => {
    const { container } = render(
      <WeatherImage
        chartType="Rain"
        imageAlt="foo"
        imageSrc="baa"
        isLazy={false}
      />,
    )

    expect(container).toMatchSnapshot()
  })
})
</file>

<file path="src/inngest/cronFunctions/pollingCronSchedule.ts">
import { config } from '@/config'

export const everyHalfHour = { cron: '*/30 * * * *' }
export const everyTwoHours = { cron: '0 */2 * * *' }

export const everySixtHours = { cron: '0 */6 * * *' }
export const never = { cron: '59 23 31 12 * 1970' }

export const defaultPollerTime =
  config.environment === 'preview' ? never : everySixtHours
</file>

<file path="src/inngest/cronFunctions/radarPoller.ts">
import { config } from '@/config'
import { inngest } from '@/inngest/client'
import { defaultPollerTime } from '@/inngest/cronFunctions/pollingCronSchedule'
import {
  calculateImagesToDownload,
  calculateImagesToRemove,
  retrieveImagesFromStorage,
} from '@/shared/helpers/v2/imageStorage'
import { scrapeRadarImages } from '@/shared/helpers/v2/screenScraper'

export const radarPoller = inngest.createFunction(
  { id: 'radar-poller' }, // The name of your function, used for observability.
  defaultPollerTime,

  // This function will be called on the schedule above
  async ({ step }) => {
    const newImages = await scrapeRadarImages()

    const existingImages = await retrieveImagesFromStorage('images/radar')

    const toRemove = calculateImagesToRemove(newImages, existingImages)

    const toDownload = calculateImagesToDownload(newImages, existingImages)

    if (toRemove.length > 0) {
      await step.sendEvent('dispatch-remove-images-event', {
        name: 'images/remove',
        data: {
          bucket: config.supbabaseBucketName,
          toRemove,
        },
      })
    }

    if (toDownload.length > 0) {
      await step.sendEvent('dispatch-upload-images-event', {
        name: 'images/upload',
        data: {
          bucket: config.supbabaseBucketName,
          chartType: 'Radar',
          toUpload: toDownload,
        },
      })
    }

    return {
      toRemove,
      toDownload,
    }
  },
)
</file>

<file path="src/inngest/cronFunctions/rainPoller.ts">
import { config } from '@/config'
import { inngest, RegionScrape } from '@/inngest/client'
import { Events } from '@/inngest/client'
import { defaultPollerTime } from '@/inngest/cronFunctions/pollingCronSchedule'
import { regions } from '@/shared/types/region'

export const rainPoller = inngest.createFunction(
  { id: 'rain-poller' }, // The name of your function, used for observability.
  defaultPollerTime,

  // This function will be called on the schedule above
  async ({ step }) => {
    const events: RegionScrape[] = regions.map<Events['scrape/region']>(
      (region) => ({
        name: 'scrape/region',
        data: { bucket: config.supbabaseBucketName, region: region },
      }),
    )

    // @ts-ignore
    await step.sendEvent('scrape-rain-region', events)
  },
)
</file>

<file path="src/inngest/cronFunctions/satellitePoller.ts">
import { config } from '@/config'
import { inngest } from '@/inngest/client'
import { defaultPollerTime } from '@/inngest/cronFunctions/pollingCronSchedule'
import {
  calculateImagesToDownload,
  calculateImagesToRemove,
  retrieveImagesFromStorage,
} from '@/shared/helpers/v2/imageStorage'
import { scrapeSatelliteImages } from '@/shared/helpers/v2/screenScraper'

export const satellitePoller = inngest.createFunction(
  { id: 'satellite-poller' }, // The name of your function, used for observability.
  defaultPollerTime,

  // This function will be called on the schedule above
  async ({ step }) => {
    const newImages = await scrapeSatelliteImages()

    const existingImages = await retrieveImagesFromStorage('images/satellite')

    const toRemove = calculateImagesToRemove(newImages, existingImages)

    const toDownload = calculateImagesToDownload(newImages, existingImages)

    if (toRemove.length > 0) {
      await step.sendEvent('dispatch-remove-images-event', {
        name: 'images/remove',
        data: {
          bucket: config.supbabaseBucketName,
          toRemove,
        },
      })
    }

    if (toDownload.length > 0) {
      await step.sendEvent('dispatch-upload-images-event', {
        name: 'images/upload',
        data: {
          bucket: config.supbabaseBucketName,
          chartType: 'Satellite',
          toUpload: toDownload,
        },
      })
    }

    return {
      toRemove,
      toDownload,
    }
  },
)
</file>

<file path="src/inngest/cronFunctions/upperAirPoller.ts">
import { config } from '@/config'
import { inngest } from '@/inngest/client'
import { defaultPollerTime } from '@/inngest/cronFunctions/pollingCronSchedule'
import {
  calculateImagesToDownload,
  calculateImagesToRemove,
  retrieveImagesFromStorage,
} from '@/shared/helpers/v2/imageStorage'
import { scrapeUpperAirImages } from '@/shared/helpers/v2/screenScraper'

export const upperAirPoller = inngest.createFunction(
  { id: 'upper-air-poller' }, // The name of your function, used for observability.
  defaultPollerTime,

  // This function will be called on the schedule above
  async ({ step }) => {
    const newImages = await scrapeUpperAirImages()

    const existingImages = await retrieveImagesFromStorage('images/upper-air')

    const toRemove = calculateImagesToRemove(newImages, existingImages)

    const toDownload = calculateImagesToDownload(newImages, existingImages)

    if (toRemove.length > 0) {
      await step.sendEvent('dispatch-remove-images-event', {
        name: 'images/remove',
        data: {
          bucket: config.supbabaseBucketName,
          toRemove,
        },
      })
    }

    if (toDownload.length > 0) {
      await step.sendEvent('dispatch-upload-images-event', {
        name: 'images/upload',
        data: {
          bucket: config.supbabaseBucketName,
          chartType: 'Upper Air',
          toUpload: toDownload,
        },
      })
    }

    return {
      toRemove,
      toDownload,
    }
  },
)
</file>

<file path="src/inngest/functions/removeImages.ts">
import { inngest } from '@/inngest/client'
import { removeImagesFromStorage } from '@/shared/helpers/v2/imageStorage/removeImagesFromStorage'

export const removeImages = inngest.createFunction(
  {
    id: 'remove-images',
    concurrency: { scope: 'account', limit: 10, key: 'metvuw' },
  },
  { event: 'images/remove' },
  async ({ event }) => {
    const { bucket, toRemove } = event.data

    if (toRemove.length === 0) {
      return { event, message: 'skipping' }
    }

    const result = await removeImagesFromStorage(bucket, toRemove)

    return { event, ...result }
  },
)
</file>

<file path="src/inngest/functions/scrapeRegion.ts">
import { inngest } from '@/inngest/client'
import {
  calculateImagesToDownload,
  calculateImagesToRemove,
  retrieveImagesFromStorage,
} from '@/shared/helpers/v2/imageStorage'
import { scrapeRainImages } from '@/shared/helpers/v2/screenScraper'

export const scrapeRegion = inngest.createFunction(
  {
    id: 'scrape-region',
    concurrency: { scope: 'account', limit: 10, key: 'metvuw' },
  },
  { event: 'scrape/region' },
  async ({ event, step }) => {
    const { bucket, region } = event.data

    const newImages = await scrapeRainImages(region)

    const existingImages = await retrieveImagesFromStorage(
      `images/rain/${region.code}`,
    )

    const toRemove = calculateImagesToRemove(newImages, existingImages)

    const toDownload = calculateImagesToDownload(newImages, existingImages)

    if (toRemove.length > 0) {
      await step.sendEvent('dispatch-remove-images-event', {
        name: 'images/remove',
        data: {
          bucket: bucket,
          toRemove,
        },
      })
    }

    if (toDownload.length > 0) {
      await step.sendEvent('dispatch-upload-images-event', {
        name: 'images/upload',
        data: {
          bucket: bucket,
          chartType: 'Rain',
          toUpload: toDownload,
        },
      })
    }

    return {
      toRemove,
      toDownload,
    }
  },
)
</file>

<file path="src/inngest/functions/uploadImages.ts">
import { inngest } from '@/inngest/client'
import { downloadAndUpload } from '@/shared/helpers/v2/imageStorage/downloadAndUpload'

export const uploadImages = inngest.createFunction(
  {
    id: 'upload-images',
    concurrency: { scope: 'account', limit: 10, key: 'metvuw' },
  },
  { event: 'images/upload' },
  async ({ event }) => {
    const { bucket, chartType, toUpload: images } = event.data
    if (images != null) {
      await Promise.all(
        images.map(async (image) =>
          downloadAndUpload(bucket, chartType, image),
        ),
      )
    }
    return { event }
  },
)
</file>

<file path="src/inngest/client.ts">
import { EventSchemas, Inngest } from 'inngest'

import { config } from '@/config'
import { ScrapedImage } from '@/shared/helpers/v2/screenScraper/scrapedImage'
import { ChartType } from '@/shared/types/ChartType'
import { Region } from '@/shared/types/region'
import { StorageImage } from '@/shared/types/storageImage'

type ImageRemoval = {
  data: {
    bucket: string
    toRemove: StorageImage[]
  }
}
type ImageUpload = {
  data: {
    bucket: string
    chartType: ChartType
    toUpload: ScrapedImage[]
  }
}

export type RegionScrape = {
  data: {
    bucket: string
    region: Region
  }
}

export type Events = {
  'images/remove': ImageRemoval
  'images/upload': ImageUpload
  'scrape/region': RegionScrape
}

export const inngest = new Inngest({
  id: 'metvuw-mobile',
  eventKey: config.inngestEventKey,
  schemas: new EventSchemas().fromRecord<Events>(),
})
</file>

<file path="src/shared/db/database.types.ts">
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  graphql_public: {
    Tables: {
      [_ in never]: never
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      graphql: {
        Args: {
          operationName?: string
          query?: string
          variables?: Json
          extensions?: Json
        }
        Returns: Json
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
  public: {
    Tables: {
      images_to_remove: {
        Row: {
          bucket_id: string
          created_at: string
          full_storage_path: string
          trigger_key: string
        }
        Insert: {
          bucket_id: string
          created_at?: string
          full_storage_path: string
          trigger_key: string
        }
        Update: {
          bucket_id?: string
          created_at?: string
          full_storage_path?: string
          trigger_key?: string
        }
        Relationships: []
      }
      images_to_upload: {
        Row: {
          bucket_id: string
          chart_type: string
          created_at: string
          full_storage_path: string
          original_image_url: string
          small_image_storagePath: string | null
          trigger_key: string
        }
        Insert: {
          bucket_id: string
          chart_type: string
          created_at?: string
          full_storage_path: string
          original_image_url: string
          small_image_storagePath?: string | null
          trigger_key: string
        }
        Update: {
          bucket_id?: string
          chart_type?: string
          created_at?: string
          full_storage_path?: string
          original_image_url?: string
          small_image_storagePath?: string | null
          trigger_key?: string
        }
        Relationships: []
      }
      trigger: {
        Row: {
          created_at: string
          host_name: string
          id: number
          is_completed: boolean
          operation_name: string
          trigger_key: string
        }
        Insert: {
          created_at?: string
          host_name?: string
          id?: number
          is_completed?: boolean
          operation_name: string
          trigger_key: string
        }
        Update: {
          created_at?: string
          host_name?: string
          id?: number
          is_completed?: boolean
          operation_name?: string
          trigger_key?: string
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
  storage: {
    Tables: {
      buckets: {
        Row: {
          allowed_mime_types: string[] | null
          avif_autodetection: boolean | null
          created_at: string | null
          file_size_limit: number | null
          id: string
          name: string
          owner: string | null
          owner_id: string | null
          public: boolean | null
          updated_at: string | null
        }
        Insert: {
          allowed_mime_types?: string[] | null
          avif_autodetection?: boolean | null
          created_at?: string | null
          file_size_limit?: number | null
          id: string
          name: string
          owner?: string | null
          owner_id?: string | null
          public?: boolean | null
          updated_at?: string | null
        }
        Update: {
          allowed_mime_types?: string[] | null
          avif_autodetection?: boolean | null
          created_at?: string | null
          file_size_limit?: number | null
          id?: string
          name?: string
          owner?: string | null
          owner_id?: string | null
          public?: boolean | null
          updated_at?: string | null
        }
        Relationships: []
      }
      migrations: {
        Row: {
          executed_at: string | null
          hash: string
          id: number
          name: string
        }
        Insert: {
          executed_at?: string | null
          hash: string
          id: number
          name: string
        }
        Update: {
          executed_at?: string | null
          hash?: string
          id?: number
          name?: string
        }
        Relationships: []
      }
      objects: {
        Row: {
          bucket_id: string | null
          created_at: string | null
          id: string
          last_accessed_at: string | null
          metadata: Json | null
          name: string | null
          owner: string | null
          owner_id: string | null
          path_tokens: string[] | null
          updated_at: string | null
          version: string | null
        }
        Insert: {
          bucket_id?: string | null
          created_at?: string | null
          id?: string
          last_accessed_at?: string | null
          metadata?: Json | null
          name?: string | null
          owner?: string | null
          owner_id?: string | null
          path_tokens?: string[] | null
          updated_at?: string | null
          version?: string | null
        }
        Update: {
          bucket_id?: string | null
          created_at?: string | null
          id?: string
          last_accessed_at?: string | null
          metadata?: Json | null
          name?: string | null
          owner?: string | null
          owner_id?: string | null
          path_tokens?: string[] | null
          updated_at?: string | null
          version?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "objects_bucketId_fkey"
            columns: ["bucket_id"]
            isOneToOne: false
            referencedRelation: "buckets"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      can_insert_object: {
        Args: {
          bucketid: string
          name: string
          owner: string
          metadata: Json
        }
        Returns: undefined
      }
      extension: {
        Args: {
          name: string
        }
        Returns: string
      }
      filename: {
        Args: {
          name: string
        }
        Returns: string
      }
      foldername: {
        Args: {
          name: string
        }
        Returns: string[]
      }
      get_size_by_bucket: {
        Args: Record<PropertyKey, never>
        Returns: {
          size: number
          bucket_id: string
        }[]
      }
      search: {
        Args: {
          prefix: string
          bucketname: string
          limits?: number
          levels?: number
          offsets?: number
          search?: string
          sortcolumn?: string
          sortorder?: string
        }
        Returns: {
          name: string
          id: string
          updated_at: string
          created_at: string
          last_accessed_at: string
          metadata: Json
        }[]
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type PublicSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (PublicSchema["Tables"] & PublicSchema["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] &
        PublicSchema["Views"])
    ? (PublicSchema["Tables"] &
        PublicSchema["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof PublicSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema["Enums"]
    ? PublicSchema["Enums"][PublicEnumNameOrOptions]
    : never
</file>

<file path="src/shared/db/serviceRoleDb.ts">
import { createClient } from '@supabase/supabase-js'

import { config } from '@/config'
import { Database } from '@/shared/db/database.types'

const serviceRoleDb = createClient<Database>(
  config.supabaseUrl,
  config.supabaseServiceRoleKey,
  {
    auth: { persistSession: false },
  },
)

export default serviceRoleDb
</file>

<file path="src/shared/helpers/v2/chartData/constructChartData.ts">
import { config } from '@/config'
import serviceRoleDb from '@/shared/db/serviceRoleDb'
import { ChartData } from '@/shared/types/chartData'
import { StorageImage } from '@/shared/types/storageImage'

export type SkinnyChartData = Pick<ChartData, 'imageDateUTC' | 'url'>

export function constructChartData(images: StorageImage[]): SkinnyChartData[] {
  return images.map((image) => {
    const fileName = image.imageFileName
    const { data: publicUrl } = serviceRoleDb.storage
      .from(config.supbabaseBucketName)
      .getPublicUrl(image.fullStoragePath)

    const year = +fileName.slice(0, 4)
    const month = +fileName.slice(4, 6) - 1
    const day = +fileName.slice(6, 8)
    const hour = +fileName.slice(8, 10)
    const utcDate = Date.UTC(year, month, day, hour)

    return {
      imageDateUTC: utcDate,
      url: publicUrl.publicUrl,
    }
  })
}
</file>

<file path="src/shared/helpers/v2/chartData/constructRainChartData.ts">
import { config } from '@/config'
import serviceRoleDb from '@/shared/db/serviceRoleDb'
import { SkinnyRainChartData } from '@/shared/types/rainChartData'
import { StorageImage } from '@/shared/types/storageImage'

export function constructRainChartData(
  images: StorageImage[],
): SkinnyRainChartData[] {
  const regex =
    /rain-(?<region>\w+)-thumb-(?<year>\d{4})(?<month>\d{2})(?<day>\d{2})(?<hour>\d{2})-(?<offset>\d{3}).webp/

  return images.map((image) => {
    const fileName = image.imageFileName
    const publicUrl = serviceRoleDb.storage
      .from(config.supbabaseBucketName)
      .getPublicUrl(image.fullStoragePath).data.publicUrl
    const match = fileName.match(regex)?.groups || {}

    const getGroup = (groupName: string) => +match[groupName] || 0
    const [year, month, day, hour, offset] = [
      'year',
      'month',
      'day',
      'hour',
      'offset',
    ].map(getGroup)

    return {
      imageDateUTC: Date.UTC(year, month - 1, day, hour),
      url: publicUrl,
      forecastDate: new Date(
        Date.UTC(year, month - 1, day, hour + offset),
      ).toISOString(),
    }
  })
}
</file>

<file path="src/shared/helpers/v2/imageCompression/compressRadarImage.ts">
import sharp from 'sharp'

import { radarImageDimensions } from '@/shared/helpers/v2/imageCompression/imageDimensions'

export function compressRadarImage(image: Buffer): Promise<Buffer> {
  return sharp(image)
    .webp({ quality: 100 })
    .sharpen()
    .resize({ width: 565 })
    .extract({ ...radarImageDimensions, left: 0, top: 0 })
    .toBuffer()
}
</file>

<file path="src/shared/helpers/v2/imageCompression/compressRainImage.ts">
import sharp from 'sharp'

import { rainImageDimensions } from '@/shared/helpers/v2/imageCompression/imageDimensions'

export default function compressRainImage(image: Buffer): Promise<Buffer> {
  return sharp(image)
    .webp({ quality: 40 })
    .extract({ ...rainImageDimensions, left: 73, top: 116 })
    .toBuffer()
}
</file>

<file path="src/shared/helpers/v2/imageCompression/compressSatelliteImage.ts">
import sharp from 'sharp'

import {
  satelliteImageDimensions,
  smallSatelliteImageDimensions,
} from '@/shared/helpers/v2/imageCompression/imageDimensions'

export function compressSatelliteImage(image: Buffer) {
  return sharp(image)
    .webp({ quality: 20, preset: 'photo' })
    .extract({ ...satelliteImageDimensions, left: 0, top: 0 })
    .toBuffer()
}

export function compressSmallSatelliteImage(image: Buffer) {
  return sharp(image)
    .webp({ quality: 20, preset: 'photo' })
    .extract({ ...satelliteImageDimensions, left: 0, top: 0 })
    .resize({ ...smallSatelliteImageDimensions })
    .toBuffer()
}
</file>

<file path="src/shared/helpers/v2/imageCompression/compressUpperAirImage.ts">
import sharp from 'sharp'

import { smallUpperAirImageDimensions } from '@/shared/helpers/v2/imageCompression/imageDimensions'

export function compressUpperAirImage(image: Buffer): Promise<Buffer> {
  return sharp(image).webp({ quality: 30, preset: 'picture' }).toBuffer()
}

export function compressSmallUpperAirImage(image: Buffer): Promise<Buffer> {
  return sharp(image)
    .webp({ quality: 30, preset: 'picture' })
    .resize({ ...smallUpperAirImageDimensions })
    .toBuffer()
}
</file>

<file path="src/shared/helpers/v2/imageCompression/getCompressorForChart.ts">
import { compressRadarImage } from '@/shared/helpers/v2/imageCompression/compressRadarImage'
import compressRainImage from '@/shared/helpers/v2/imageCompression/compressRainImage'
import {
  compressSatelliteImage,
  compressSmallSatelliteImage,
} from '@/shared/helpers/v2/imageCompression/compressSatelliteImage'
import {
  compressSmallUpperAirImage,
  compressUpperAirImage,
} from '@/shared/helpers/v2/imageCompression/compressUpperAirImage'
import { ChartType } from '@/shared/types/ChartType'

export const getCompressorForChart = (chartType: ChartType) => {
  switch (chartType) {
    case 'Satellite': {
      return {
        primary: compressSatelliteImage,
        small: compressSmallSatelliteImage,
      }
    }
    case 'Radar':
      return { primary: compressRadarImage }
    case 'Rain':
      return { primary: compressRainImage }
    case 'Upper Air':
      return {
        primary: compressUpperAirImage,
        small: compressSmallUpperAirImage,
      }
    default:
      throw new Error(`unsupported chart type: ${chartType}`)
  }
}
</file>

<file path="src/shared/helpers/v2/imageCompression/imageDimensions.ts">
export const rainImageDimensions = { width: 565, height: 396 }
export const radarImageDimensions = { width: 565, height: 540 }

export const satelliteImageDimensions = { width: 840, height: 607 }
export const smallSatelliteImageDimensions = { width: 300, height: 217 }
export const upperAirImageDimensions = { width: 760, height: 690 }
export const smallUpperAirImageDimensions = { width: 300, height: 272 }
</file>

<file path="src/shared/helpers/v2/imageStorage/defaults.ts">
import { SearchOptions } from '@supabase/storage-js/src/lib/types'

export const defaultSearchOptions: SearchOptions = {
  limit: 200,
  offset: 0,
  search: '',
  sortBy: {
    column: 'name',
    order: 'asc',
  },
}
</file>

<file path="src/shared/helpers/v2/imageStorage/determineImagesToAdd.test.ts">
import {
  calculateImagesToDownload,
  calculateImagesToRemove,
} from '@/shared/helpers/v2/imageStorage/determineImagesToAdd'
import { ScrapedImage } from '@/shared/helpers/v2/screenScraper/scrapedImage'
import { StorageImage } from '@/shared/types/storageImage'

describe('calculateImagesToDownload', () => {
  test('if image does not exist then should be added', () => {
    const newImages: ScrapedImage[] = [
      {
        originalFileName: 'image-to-add',
        originalImageURL: new URL('https://metvuw.com').href,
        fullStoragePath: 'satellite/image-to-add.webp',
        imageFileName: 'image-to-add.webp',
      },
    ]
    const existingImages: StorageImage[] = [
      {
        imageFileName: 'existing-image.webp',
        fullStoragePath: 'satellite/existing-image.webp',
      },
    ]

    const toAdd = calculateImagesToDownload(newImages, existingImages)

    expect(toAdd).toHaveLength(1)
  })

  test('if image does exist then should not be added', () => {
    const newImages: ScrapedImage[] = [
      {
        originalFileName: 'existing-image',
        originalImageURL: new URL('https://metvuw.com').href,
        fullStoragePath: 'satellite/existing-image.webp',
        imageFileName: 'existing-image.webp',
      },
    ]
    const existingImages: StorageImage[] = [
      {
        imageFileName: 'existing-image.webp',
        fullStoragePath: 'satellite/existing-image.webp',
      },
    ]

    const toAdd = calculateImagesToDownload(newImages, existingImages)

    expect(toAdd).toHaveLength(0)
  })
})

describe('calculateImagesToRemove', () => {
  test('if image does not exist then should be removed', () => {
    const newImages: ScrapedImage[] = [
      {
        originalFileName: 'image-to-add',
        originalImageURL: new URL('https://metvuw.com').href,
        fullStoragePath: 'satellite/image-to-add.webp',
        imageFileName: 'image-to-add.webp',
      },
    ]
    const existingImages: StorageImage[] = [
      {
        imageFileName: 'existing-image.webp',
        fullStoragePath: 'satellite/existing-image.webp',
      },
    ]

    const toAdd = calculateImagesToRemove(newImages, existingImages)

    expect(toAdd).toHaveLength(1)
  })

  test('if image does exist then should not be removed', () => {
    const newImages: ScrapedImage[] = [
      {
        originalFileName: 'existing-image',
        originalImageURL: new URL('https://metvuw.com').href,
        fullStoragePath: 'satellite/existing-image.webp',
        imageFileName: 'existing-image.webp',
      },
    ]
    const existingImages: StorageImage[] = [
      {
        imageFileName: 'existing-image.webp',
        fullStoragePath: 'satellite/existing-image.webp',
      },
    ]

    const toAdd = calculateImagesToRemove(newImages, existingImages)

    expect(toAdd).toHaveLength(0)
  })
})
</file>

<file path="src/shared/helpers/v2/imageStorage/determineImagesToAdd.ts">
import { ScrapedImage } from '@/shared/helpers/v2/screenScraper/scrapedImage'
import { StorageImage } from '@/shared/types/storageImage'

function isMatch(existing: StorageImage, newImage: ScrapedImage) {
  return existing.fullStoragePath === newImage.fullStoragePath
}

export const calculateImagesToDownload = (
  newImages: ScrapedImage[],
  existingImages: StorageImage[],
): ScrapedImage[] =>
  newImages.filter(
    (newImage) =>
      !existingImages.some((existing) => isMatch(existing, newImage)),
  )

export const calculateImagesToRemove = (
  newImages: ScrapedImage[],
  existingImages: StorageImage[],
): StorageImage[] =>
  existingImages.filter(
    (existing) => !newImages.some((newImage) => isMatch(existing, newImage)),
  )
</file>

<file path="src/shared/helpers/v2/imageStorage/downloadAndUpload.ts">
import { getCompressorForChart } from '@/shared/helpers/v2/imageCompression/getCompressorForChart'
import { downloadImageToBuffer } from '@/shared/helpers/v2/imageStorage/downloadImageToBuffer'
import { uploadImage } from '@/shared/helpers/v2/imageStorage/uploadImagesToStorage'
import { ScrapedImage } from '@/shared/helpers/v2/screenScraper/scrapedImage'
import { ChartType } from '@/shared/types/ChartType'

export async function downloadAndUpload(
  bucket: string,
  chartType: ChartType,
  { originalImageURL, smallImageStoragePath, fullStoragePath }: ScrapedImage,
) {
  const image = await downloadImageToBuffer(originalImageURL)

  const { primary, small } = getCompressorForChart(chartType)

  const imageToUpload = await primary(image.fileBuffer)

  if (small && smallImageStoragePath) {
    const smallImage = await small(image.fileBuffer)
    await uploadImage(bucket, smallImageStoragePath, smallImage)
  }
  return uploadImage(bucket, fullStoragePath, imageToUpload)
}
</file>

<file path="src/shared/helpers/v2/imageStorage/downloadImageToBuffer.ts">
import axios from 'axios'

export async function downloadImageToBuffer(url: string) {
  try {
    const { data, headers } = await axios.get(url, {
      responseType: 'arraybuffer',
    })
    return {
      fileBuffer: Buffer.from(data, 'binary'),
      contentType: headers['content-type'],
    }
  } catch (e) {
    // eslint-disable-next-line
    console.error(`error [downloadImageToBuffer] ${url}`)
    throw e
  }
}
</file>

<file path="src/shared/helpers/v2/imageStorage/index.ts">
export * from './defaults'
export * from './determineImagesToAdd'
export * from './retrieveImagesFromStorage'
export * from './uploadImagesToStorage'
export { downloadImageToBuffer } from '@/shared/helpers/v2/imageStorage/downloadImageToBuffer'
</file>

<file path="src/shared/helpers/v2/imageStorage/removeImagesFromStorage.ts">
import { FileObject, StorageError } from '@supabase/storage-js'

import serviceRoleDb from '@/shared/db/serviceRoleDb'
import { StorageImage } from '@/shared/types/storageImage'

export async function removeImagesFromStorage(
  bucketName: string,
  toRemove: StorageImage[],
): Promise<
  { data: FileObject[]; error: null } | { data: null; error: StorageError }
> {
  if (toRemove.length === 0) {
    return { data: [], error: null }
  }

  const imagePaths = toRemove.map((img) => img.fullStoragePath)

  const result = await serviceRoleDb.storage.from(bucketName).remove(imagePaths)

  return result
}
</file>

<file path="src/shared/helpers/v2/imageStorage/uploadImagesToStorage.ts">
import path from 'node:path'

import serviceRoleDb from '@/shared/db/serviceRoleDb'

const OneYear = '31536000'
export function uploadImage(
  bucketId: string,
  fullStoragePath: string,
  imageToUpload: Buffer,
) {
  const fileExtension = path.extname(fullStoragePath)

  return serviceRoleDb.storage
    .from(bucketId)
    .upload(fullStoragePath.replace(fileExtension, '.webp'), imageToUpload, {
      contentType: 'image/webp',
      upsert: false,
      cacheControl: OneYear,
    })
}
</file>

<file path="src/shared/helpers/v2/screenScraper/imagePipeline.ts">
/* eslint-disable no-unused-vars */
import path from 'node:path'

import { config } from '@/config'
import { ScrapedImage } from '@/shared/helpers/v2/screenScraper/scrapedImage'

/**
 * Function to transform and generate paths for scraped images.
 *
 * @param {function} relativeUrlTransformer - A function that transforms the relative URL of an image.
 * @param {function} fullStoragePathGenerator - A function that generates the full storage path for the original and new image file.
 *
 * @returns {function} - Returns a function that takes an image object and returns an object with the original image URL, original file name, new file name, and full storage paths.
 */
export function imagePipeline(
  relativeUrlTransformer: (relativeUrl: string) => string,
  fullStoragePathGenerator: (
    originalFileName: string,
    newFileName: string,
  ) => Pick<ScrapedImage, 'fullStoragePath' | 'smallImageStoragePath'>,
) {
  return (image: { relativeUrl: string }) => {
    const transformedUrl = relativeUrlTransformer(image.relativeUrl)
    const originalImageURL = new URL(transformedUrl, config.metvuwBaseUrl)
    const originalFileName = path.basename(originalImageURL.pathname)
    const newFileName = originalFileName.replace(
      path.extname(originalFileName),
      '.webp',
    )

    return {
      originalImageURL: originalImageURL.href,
      originalFileName,
      imageFileName: newFileName,
      ...fullStoragePathGenerator(originalFileName, newFileName),
    }
  }
}
</file>

<file path="src/shared/helpers/v2/screenScraper/index.js">
export * from './loadImages'
export * from './scrapeRadarImages'
export * from './scrapeRainImages'
export * from './scrapeSatelliteImages'
export * from './scrapeUpperAirImages'
</file>

<file path="src/shared/helpers/v2/screenScraper/loadImages.ts">
import axios from 'axios'
import * as cheerio from 'cheerio'

import { config } from '@/config'

/**
 * This function is used to load images from a given URL.
 * It uses axios to make a GET request to the URL and cheerio to parse the HTML response.
 *
 * @param {string} url - The URL from which to load the images.
 * @param {string} imageSelector - The CSS selector to use to select the images from the HTML.
 *
 * @returns {Promise<{ relativeUrl: string; width: number; height: number }[]>} - A promise that resolves to an array of objects.
 * Each object represents an image and has properties for the image's relative URL, width, and height.
 */
export async function loadImages(
  url: string,
  imageSelector: string,
): Promise<{ relativeUrl: string }[]> {
  const response = await axios.get(new URL(url, config.metvuwBaseUrl).href)
  const rawHtml = response.data

  const $ = cheerio.load(rawHtml)

  const images = $(imageSelector)

  return images.toArray().map((image: any) => ({
    relativeUrl: image.attribs.src as string,
  }))
}
</file>

<file path="src/shared/helpers/v2/screenScraper/scrapedImage.ts">
import { StorageImage } from '@/shared/types/storageImage'

export interface ScrapedImage extends StorageImage {
  originalImageURL: string
  originalFileName: string
  smallImageStoragePath?: string
}
</file>

<file path="src/shared/helpers/v2/screenScraper/scrapeRadarImages.ts">
import { imagePipeline } from '@/shared/helpers/v2/screenScraper/imagePipeline'
import { loadImages } from '@/shared/helpers/v2/screenScraper/loadImages'
import { ScrapedImage } from '@/shared/helpers/v2/screenScraper/scrapedImage'

export const scrapeRadarImages = async (): Promise<ScrapedImage[]> => {
  const images = await loadImages(
    'radar/radar.php?location=nz',
    'img[src*=images]',
  )

  return images.map((image) => {
    return imagePipeline(
      (relativeUrl) => relativeUrl.replace('.', 'radar'),
      (originalFileName, newFileName) => {
        const radarCode =
          originalFileName.match(/\d+\w_(?<radar>\w+).gif/)?.groups?.radar ?? ''
        return {
          fullStoragePath: `images/radar/${radarCode}/${newFileName}`,
        }
      },
    )(image)
  })
}
</file>

<file path="src/shared/helpers/v2/screenScraper/scrapeRainImages.ts">
import { imagePipeline } from '@/shared/helpers/v2/screenScraper/imagePipeline'
import { loadImages } from '@/shared/helpers/v2/screenScraper/loadImages'
import { ScrapedImage } from '@/shared/helpers/v2/screenScraper/scrapedImage'
import { Region } from '@/shared/types/region'

export const scrapeRainImages = async (
  region: Region,
): Promise<ScrapedImage[]> => {
  // ./2021060500/rain-nz-2021060500-006.gif
  const images = await loadImages(
    `forecast/forecast.php?type=rain&region=${region.code}&noofdays=10`,
    'img[src*=rain]',
  )

  return images.map((image) => {
    return imagePipeline(
      (relativeUrl) => relativeUrl.replace('.', 'forecast'),
      (originalFileName, newFileName) => {
        const regionCode =
          originalFileName.match(
            /rain-(?<region>\w+)-thumb-(?<filename>\d+-\d+\.gif)/,
          )?.groups?.region ?? ''

        return {
          fullStoragePath: `images/rain/${regionCode}/${newFileName}`,
        }
      },
    )(image)
  })
}
</file>

<file path="src/shared/helpers/v2/screenScraper/scrapeSatelliteImages.ts">
import { imagePipeline } from '@/shared/helpers/v2/screenScraper/imagePipeline'
import { loadImages } from '@/shared/helpers/v2/screenScraper/loadImages'
import { ScrapedImage } from '@/shared/helpers/v2/screenScraper/scrapedImage'

export const scrapeSatelliteImages = async (): Promise<ScrapedImage[]> => {
  const images = await loadImages('satellite', 'img[src*=small]')

  return images.map((image) => {
    return imagePipeline(
      (relativeUrl) => relativeUrl.replace('./small', 'satellite/big'),
      (originalFileName, newFileName) => ({
        fullStoragePath: `images/satellite/${newFileName}`,
        smallImageStoragePath: `small-images/satellite/${newFileName}`,
      }),
    )(image)
  })
}
</file>

<file path="src/shared/helpers/v2/screenScraper/scrapeUpperAirImages.ts">
import { imagePipeline } from '@/shared/helpers/v2/screenScraper/imagePipeline'
import { loadImages } from '@/shared/helpers/v2/screenScraper/loadImages'
import { ScrapedImage } from '@/shared/helpers/v2/screenScraper/scrapedImage'

export const scrapeUpperAirImages = async (): Promise<ScrapedImage[]> => {
  const images = await loadImages('upperair', 'img[src$="thumb.png"]')

  return images.map((image) => {
    return imagePipeline(
      (relativeUrl) =>
        relativeUrl.replace('.', 'upperair').replace('.thumb', ''),
      (originalFileName, newFileName) => {
        const regex = /(?<date>\d+)\.(?<balloon>\d+).png/
        const balloonCode = originalFileName.match(regex)?.groups?.balloon ?? ''

        return {
          fullStoragePath: `images/upper-air/${balloonCode}/${newFileName}`,
          smallImageStoragePath: `small-images/upper-air/${balloonCode}/${newFileName}`,
        }
      },
    )(image)
  })
}
</file>

<file path="src/shared/helpers/generateSEOMetadata.ts">
import { Metadata } from 'next'

import { config } from '@/config'

export default function generateSEOMetadata({
  title,
  description,
  url,
}: {
  description: string
  title: string
  url: string
}): Metadata {
  return {
    alternates: {
      canonical: url,
    },
    description,
    icons: [
      { rel: 'apple-touch-icon', sizes: '57x57', url: '/apple-icon-57x57.png' },
      { rel: 'apple-touch-icon', sizes: '60x60', url: '/apple-icon-60x60.png' },
      {
        rel: 'apple-touch-icon',
        sizes: '60x60',
        url: '/apple-icon-60x60.png',
      },
      { rel: 'apple-touch-icon', sizes: '72x72', url: '/apple-icon-72x72.png' },
      { rel: 'apple-touch-icon', sizes: '76x76', url: '/apple-icon-76x76.png' },
      {
        rel: 'apple-touch-icon',
        sizes: '114x114',
        url: '/apple-icon-114x114.png',
      },
      {
        rel: 'apple-touch-icon',
        sizes: '120x120',
        url: '/apple-icon-120x120.png',
      },
      {
        rel: 'apple-touch-icon',
        sizes: '144x144',
        url: '/apple-icon-144x144.png',
      },
      {
        rel: 'apple-touch-icon',
        sizes: '152x152',
        url: '/apple-icon-152x152.png',
      },
      {
        rel: 'apple-touch-icon',
        sizes: '180x180',
        url: '/apple-icon-180x180.png',
      },
      {
        rel: 'icon',
        sizes: '192x192',
        type: 'image/png',
        url: '/android-icon-192x192.png',
      },
      {
        rel: 'icon',
        sizes: '32x32',
        type: 'image/png',
        url: '/favicon-32x32.png',
      },
      {
        rel: 'icon',
        sizes: '96x96',
        type: 'image/png',
        url: '/favicon-96x96.png',
      },
      {
        rel: 'icon',
        sizes: '16x16',
        type: 'image/png',
        url: '/favicon-16x16.png',
      },
    ],
    manifest: '/manifest.json',
    metadataBase: new URL(config.baseUrl),
    openGraph: {
      description,
      siteName: 'Metvuw Mobile',
      title,
      type: 'website',
      url,
    },
    title,
  }
}
</file>

<file path="src/shared/types/balloonLocations.test.ts">
import {
  getsBalloonLocationCodeOrDefault,
  isBalloonLocationCode,
} from './balloonLocations'

describe('isBalloonLocationCode', () => {
  it('returns true for valid balloon location code', () => {
    expect(isBalloonLocationCode('93112')).toBe(true)
  })

  it('returns false for invalid balloon location code', () => {
    expect(isBalloonLocationCode('99999')).toBe(false)
  })

  it('returns false for empty string', () => {
    expect(isBalloonLocationCode('')).toBe(false)
  })
})

describe('getsBalloonLocationCodeOrDefault', () => {
  it('returns default code when input is undefined', () => {
    expect(getsBalloonLocationCodeOrDefault(undefined)).toBe('93112')
  })

  it('returns default code when input is empty string', () => {
    expect(getsBalloonLocationCodeOrDefault('')).toBe('93112')
  })

  it('returns the same code when input is a valid balloon location code', () => {
    expect(getsBalloonLocationCodeOrDefault('93417')).toBe('93417')
  })

  it('returns false when input is an invalid balloon location code', () => {
    expect(getsBalloonLocationCodeOrDefault('99999')).toBe(false)
  })
})
</file>

<file path="src/shared/types/balloonLocations.ts">
export type BalloonLocationCode = '93112' | '93417' | '93844'

export type BalloonLocation =
  | 'Whenuapai'
  | 'Paraparaumu'
  | 'Invercargill'
  | 'Raoul Island'

export const balloonLocations: Record<BalloonLocationCode, BalloonLocation> = {
  '93112': 'Whenuapai',
  '93417': 'Paraparaumu',
  '93844': 'Invercargill',
}

export function isBalloonLocationCode(
  value: string,
): value is BalloonLocationCode {
  return ['93112', '93417', '93844'].includes(value as BalloonLocationCode)
}

export function getsBalloonLocationCodeOrDefault(
  balloonLocationCode?: string,
): BalloonLocationCode | false {
  return !balloonLocationCode
    ? '93112'
    : isBalloonLocationCode(balloonLocationCode)
      ? balloonLocationCode
      : false
}
</file>

<file path="src/shared/types/cacheRequestResult.ts">
export interface CacheRequestResult {
  success: boolean
  bucket: string
  fileName: string
  reason?: string
}

export interface CacheRefreshResult
  extends Omit<CacheRequestResult, 'fileName'> {
  refreshTime: string
  results: CacheRequestResult[]
}
</file>

<file path="src/shared/types/chartData.ts">
export interface ChartData {
  url: string
  name: string
  path?: string
  width: number
  height: number
  year: number
  month: number
  day: number
  hour: number
  imageDateUTC: number
  imageDateISO: string
}
</file>

<file path="src/shared/types/ChartType.ts">
export type ChartType = 'Rain' | 'Satellite' | 'Radar' | 'Upper Air'
</file>

<file path="src/shared/types/radarChartData.ts">
import { ChartData } from './chartData'
import { RadarCode, RadarRegion } from './radarRegions'

export interface RadarChartData extends ChartData {
  radarCode: RadarCode
  radar: RadarRegion
}
</file>

<file path="src/shared/types/radarRegions.ts">
export type RadarCode =
  | 'nl'
  | 'ak'
  | 'bp'
  | 'mh'
  | 'np'
  | 'wn'
  | 'ch'
  | 'wl'
  | 'nv'

export type RadarRegion =
  | 'Northland'
  | 'Auckland'
  | 'Bay of Plenty'
  | 'Hawkes Bay'
  | 'Taranaki'
  | 'Wellington'
  | 'Westland'
  | 'Christchurch'
  | 'Southland'

export const radarRegions: Record<RadarCode, RadarRegion> = {
  nl: 'Northland',
  ak: 'Auckland',
  bp: 'Bay of Plenty',
  mh: 'Hawkes Bay',
  np: 'Taranaki',
  wn: 'Wellington',
  ch: 'Christchurch',
  wl: 'Westland',
  nv: 'Southland',
}

export function isRadarCode(value: string): value is RadarCode {
  return ['nl', 'ak', 'bp', 'mh', 'np', 'wn', 'ch', 'wl', 'nv'].includes(
    value as RadarCode,
  )
}
</file>

<file path="src/shared/types/rainChartData.ts">
import { ChartData } from './chartData'

export interface RainChartData extends ChartData {
  forecastDate: string
  offset: number
}

export type SkinnyRainChartData = Pick<
  RainChartData,
  'imageDateUTC' | 'forecastDate' | 'url'
>
</file>

<file path="src/shared/types/region.ts">
export const regions = [
  { name: 'New Zealand', code: 'nz' },
  { name: 'North Island', code: 'nzni' },
  { name: 'South Island', code: 'nzsi' },
  { name: 'Victoria & Tasmania', code: 'victoria' },
  { name: 'New South Wales', code: 'nsw' },
  { name: 'Western Australia', code: 'waussie' },
  { name: 'Perth', code: 'swaussie' },
  { name: 'Queensland', code: 'queensland' },
  { name: 'South Australia', code: 'saussie' },
  { name: 'South East Australia', code: 'seaussie' },
  { name: 'New Caledonia', code: 'newcaledonia' },
  { name: 'South West Pacific', code: 'swp' },
  { name: 'Europe', code: 'europe' },
  { name: 'United Kingdom', code: 'uk' },
  { name: 'Estonia', code: 'estonia' },
  { name: 'Turkey', code: 'turkey' },
  { name: 'World', code: 'world' },
  { name: 'USA', code: 'usa' },
  { name: 'Japan', code: 'japan' },
  { name: 'South Africa', code: 'safrica' },

  { code: 'ocean', name: 'New Zealand to Fiji' },
  { code: 'pacific', name: 'Pacific Islands' },
  { code: 'fiji', name: 'Fiji Islands' },
  { code: 'spacific', name: 'South Pacific' },
  { code: 'pitcairn', name: 'Pitcairn Island' },
  { code: 'natlantic', name: 'North Atlantic' },
  { code: 'satlantic', name: 'South Atlantic' },
] as const

export const getByRegionCode = (code: string) => {
  const region = findRegionByCode(code)

  if (!region) {
    throw new Error(`invalid country code code: ${code} `)
  }

  return region
}
export const findRegionByCode = (code: string): Region | undefined =>
  regions.find((value) => value.code === code)

export const nzRegions: Region[] = [
  { name: 'New Zealand', code: 'nz' },
  { name: 'North Island', code: 'nzni' },
  { name: 'South Island', code: 'nzsi' },
]
export const australiaRegions: Region[] = [
  { name: 'Victoria & Tasmania', code: 'victoria' },
  { name: 'New South Wales', code: 'nsw' },
  { name: 'Western Australia', code: 'waussie' },
  { name: 'Perth', code: 'swaussie' },
  { name: 'Queensland', code: 'queensland' },
  { name: 'South Australia', code: 'saussie' },
  { name: 'South East Australia', code: 'seaussie' },
]
export const pacificRegions: Region[] = [
  { name: 'New Caledonia', code: 'newcaledonia' },
  { code: 'fiji', name: 'Fiji Islands' },
  { name: 'South West Pacific', code: 'swp' },
  // { name: 'Fiji - NZ', code: 'ocean' },
]
export const europeRegions: Region[] = [
  { name: 'Europe', code: 'europe' },
  { name: 'United Kingdom', code: 'uk' },
  { name: 'Estonia', code: 'estonia' },
  { name: 'Turkey', code: 'turkey' },
]
export const worldRegions: Region[] = [
  { name: 'World', code: 'world' },
  { name: 'South Atlantic', code: 'satlantic' },
  { name: 'North Atlantic', code: 'natlantic' },
  { name: 'USA', code: 'usa' },
  { name: 'Japan', code: 'japan' },
  { name: 'South Africa', code: 'safrica' },
]

export const oceans: Region[] = [
  { code: 'ocean', name: 'New Zealand to Fiji' },
  { code: 'pacific', name: 'Pacific Islands' },
  { code: 'fiji', name: 'Fiji Islands' },
  { code: 'spacific', name: 'South Pacific' },
  { code: 'pitcairn', name: 'Pitcairn Island' },
  { code: 'natlantic', name: 'North Atlantic' },
  { code: 'satlantic', name: 'South Atlantic' },
]

export type Region = (typeof regions)[number]
</file>

<file path="src/shared/types/satelliteChartData.ts">
import { ChartData } from './chartData'

export interface SatelliteChartData extends ChartData {}
</file>

<file path="src/shared/types/ScrapeResult.ts">
import { StorageImage } from '@/shared/types/storageImage'

export interface ScrapeResult {
  ok: boolean
  toAdd: StorageImage[]
  toRemove: StorageImage[]
}
</file>

<file path="src/shared/types/storageImage.ts">
export interface StorageImage {
  fullStoragePath: string
  imageFileName: string
}
</file>

<file path="src/shared/types/upperAirChartData.ts">
import { BalloonLocation, BalloonLocationCode } from './balloonLocations'
import { ChartData } from './chartData'

export interface UpperAirChartData extends ChartData {
  balloonLocationCode: BalloonLocationCode
  balloonLocation: BalloonLocation
}
</file>

<file path="styles/globals.css">
@import 'tailwindcss';

@config "../tailwind.config.js";
</file>

<file path="supabase/migrations/20240408033211_Initial-Schema.sql">
create table "public"."images_to_remove" (
    "created_at" timestamp with time zone not null default now(),
    "full_storage_path" text not null,
    "bucket_id" text not null
);


alter table "public"."images_to_remove" enable row level security;

create table "public"."images_to_upload" (
    "created_at" timestamp with time zone not null default now(),
    "original_image_url" text not null,
    "bucket_id" text not null,
    "full_storage_path" text not null,
    "small_image_storagePath" text,
    "chart_type" text not null
);


alter table "public"."images_to_upload" enable row level security;

create table "public"."trigger" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "operation_name" text not null,
    "is_completed" boolean not null default false,
    "host_name" text not null default 'http://localhost:3002'::text
);


alter table "public"."trigger" enable row level security;

CREATE UNIQUE INDEX images_to_remove_pkey ON public.images_to_remove USING btree (full_storage_path, bucket_id);

CREATE UNIQUE INDEX images_to_upload_pkey ON public.images_to_upload USING btree (bucket_id, full_storage_path);

CREATE UNIQUE INDEX trigger_pkey ON public.trigger USING btree (id);

alter table "public"."images_to_remove" add constraint "images_to_remove_pkey" PRIMARY KEY using index "images_to_remove_pkey";

alter table "public"."images_to_upload" add constraint "images_to_upload_pkey" PRIMARY KEY using index "images_to_upload_pkey";

alter table "public"."trigger" add constraint "trigger_pkey" PRIMARY KEY using index "trigger_pkey";

grant delete on table "public"."images_to_remove" to "anon";

grant insert on table "public"."images_to_remove" to "anon";

grant references on table "public"."images_to_remove" to "anon";

grant select on table "public"."images_to_remove" to "anon";

grant trigger on table "public"."images_to_remove" to "anon";

grant truncate on table "public"."images_to_remove" to "anon";

grant update on table "public"."images_to_remove" to "anon";

grant delete on table "public"."images_to_remove" to "authenticated";

grant insert on table "public"."images_to_remove" to "authenticated";

grant references on table "public"."images_to_remove" to "authenticated";

grant select on table "public"."images_to_remove" to "authenticated";

grant trigger on table "public"."images_to_remove" to "authenticated";

grant truncate on table "public"."images_to_remove" to "authenticated";

grant update on table "public"."images_to_remove" to "authenticated";

grant delete on table "public"."images_to_remove" to "service_role";

grant insert on table "public"."images_to_remove" to "service_role";

grant references on table "public"."images_to_remove" to "service_role";

grant select on table "public"."images_to_remove" to "service_role";

grant trigger on table "public"."images_to_remove" to "service_role";

grant truncate on table "public"."images_to_remove" to "service_role";

grant update on table "public"."images_to_remove" to "service_role";

grant delete on table "public"."images_to_upload" to "anon";

grant insert on table "public"."images_to_upload" to "anon";

grant references on table "public"."images_to_upload" to "anon";

grant select on table "public"."images_to_upload" to "anon";

grant trigger on table "public"."images_to_upload" to "anon";

grant truncate on table "public"."images_to_upload" to "anon";

grant update on table "public"."images_to_upload" to "anon";

grant delete on table "public"."images_to_upload" to "authenticated";

grant insert on table "public"."images_to_upload" to "authenticated";

grant references on table "public"."images_to_upload" to "authenticated";

grant select on table "public"."images_to_upload" to "authenticated";

grant trigger on table "public"."images_to_upload" to "authenticated";

grant truncate on table "public"."images_to_upload" to "authenticated";

grant update on table "public"."images_to_upload" to "authenticated";

grant delete on table "public"."images_to_upload" to "service_role";

grant insert on table "public"."images_to_upload" to "service_role";

grant references on table "public"."images_to_upload" to "service_role";

grant select on table "public"."images_to_upload" to "service_role";

grant trigger on table "public"."images_to_upload" to "service_role";

grant truncate on table "public"."images_to_upload" to "service_role";

grant update on table "public"."images_to_upload" to "service_role";

grant delete on table "public"."trigger" to "anon";

grant insert on table "public"."trigger" to "anon";

grant references on table "public"."trigger" to "anon";

grant select on table "public"."trigger" to "anon";

grant trigger on table "public"."trigger" to "anon";

grant truncate on table "public"."trigger" to "anon";

grant update on table "public"."trigger" to "anon";

grant delete on table "public"."trigger" to "authenticated";

grant insert on table "public"."trigger" to "authenticated";

grant references on table "public"."trigger" to "authenticated";

grant select on table "public"."trigger" to "authenticated";

grant trigger on table "public"."trigger" to "authenticated";

grant truncate on table "public"."trigger" to "authenticated";

grant update on table "public"."trigger" to "authenticated";

grant delete on table "public"."trigger" to "service_role";

grant insert on table "public"."trigger" to "service_role";

grant references on table "public"."trigger" to "service_role";

grant select on table "public"."trigger" to "service_role";

grant trigger on table "public"."trigger" to "service_role";

grant truncate on table "public"."trigger" to "service_role";

grant update on table "public"."trigger" to "service_role";
</file>

<file path="supabase/migrations/20240408033341_Create_TriggerTable_WebHook.sql">
CREATE OR REPLACE FUNCTION call_web_trigger_api()
RETURNS TRIGGER AS $$
BEGIN

    PERFORM
        net.http_post(
                NEW.host_name || '/api/run-web-trigger' ::text,
                jsonb_build_object(
                        'old_record', OLD,
                        'record', NEW,
                        'type', TG_OP,
                        'table', TG_TABLE_NAME,
                        'schema', TG_TABLE_SCHEMA
                ),
                '{}' ::jsonb,
                json_build_object('Content-type', 'application/json') ::jsonb,
                10000 ::integer
        );

RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER call_web_trigger_api
    AFTER INSERT ON public.trigger
    FOR EACH ROW EXECUTE FUNCTION call_web_trigger_api();
</file>

<file path="supabase/migrations/20240409195552_Add_trigger_key_column_to_tables.sql">
alter table "public"."images_to_remove" add column "trigger_key" text not null;

alter table "public"."images_to_upload" add column "trigger_key" text not null;

alter table "public"."trigger" add column "trigger_key" text not null;
</file>

<file path="supabase/migrations/20240410054358_modify_primary_keys_on_image_tables.sql">
alter table "public"."images_to_remove" drop constraint "images_to_remove_pkey";

alter table "public"."images_to_upload" drop constraint "images_to_upload_pkey";

drop index if exists "public"."images_to_remove_pkey";

drop index if exists "public"."images_to_upload_pkey";

CREATE UNIQUE INDEX images_to_remove_pkey ON public.images_to_remove USING btree (full_storage_path, bucket_id, trigger_key);

CREATE UNIQUE INDEX images_to_upload_pkey ON public.images_to_upload USING btree (bucket_id, full_storage_path, trigger_key);

alter table "public"."images_to_remove" add constraint "images_to_remove_pkey" PRIMARY KEY using index "images_to_remove_pkey";

alter table "public"."images_to_upload" add constraint "images_to_upload_pkey" PRIMARY KEY using index "images_to_upload_pkey";
</file>

<file path="supabase/migrations/20240412055022_remove_old_tables.sql">
drop trigger if exists "call_web_trigger_api" on "public"."trigger";

revoke delete on table "public"."images_to_remove" from "anon";

revoke insert on table "public"."images_to_remove" from "anon";

revoke references on table "public"."images_to_remove" from "anon";

revoke select on table "public"."images_to_remove" from "anon";

revoke trigger on table "public"."images_to_remove" from "anon";

revoke truncate on table "public"."images_to_remove" from "anon";

revoke update on table "public"."images_to_remove" from "anon";

revoke delete on table "public"."images_to_remove" from "authenticated";

revoke insert on table "public"."images_to_remove" from "authenticated";

revoke references on table "public"."images_to_remove" from "authenticated";

revoke select on table "public"."images_to_remove" from "authenticated";

revoke trigger on table "public"."images_to_remove" from "authenticated";

revoke truncate on table "public"."images_to_remove" from "authenticated";

revoke update on table "public"."images_to_remove" from "authenticated";

revoke delete on table "public"."images_to_remove" from "service_role";

revoke insert on table "public"."images_to_remove" from "service_role";

revoke references on table "public"."images_to_remove" from "service_role";

revoke select on table "public"."images_to_remove" from "service_role";

revoke trigger on table "public"."images_to_remove" from "service_role";

revoke truncate on table "public"."images_to_remove" from "service_role";

revoke update on table "public"."images_to_remove" from "service_role";

revoke delete on table "public"."images_to_upload" from "anon";

revoke insert on table "public"."images_to_upload" from "anon";

revoke references on table "public"."images_to_upload" from "anon";

revoke select on table "public"."images_to_upload" from "anon";

revoke trigger on table "public"."images_to_upload" from "anon";

revoke truncate on table "public"."images_to_upload" from "anon";

revoke update on table "public"."images_to_upload" from "anon";

revoke delete on table "public"."images_to_upload" from "authenticated";

revoke insert on table "public"."images_to_upload" from "authenticated";

revoke references on table "public"."images_to_upload" from "authenticated";

revoke select on table "public"."images_to_upload" from "authenticated";

revoke trigger on table "public"."images_to_upload" from "authenticated";

revoke truncate on table "public"."images_to_upload" from "authenticated";

revoke update on table "public"."images_to_upload" from "authenticated";

revoke delete on table "public"."images_to_upload" from "service_role";

revoke insert on table "public"."images_to_upload" from "service_role";

revoke references on table "public"."images_to_upload" from "service_role";

revoke select on table "public"."images_to_upload" from "service_role";

revoke trigger on table "public"."images_to_upload" from "service_role";

revoke truncate on table "public"."images_to_upload" from "service_role";

revoke update on table "public"."images_to_upload" from "service_role";

revoke delete on table "public"."trigger" from "anon";

revoke insert on table "public"."trigger" from "anon";

revoke references on table "public"."trigger" from "anon";

revoke select on table "public"."trigger" from "anon";

revoke trigger on table "public"."trigger" from "anon";

revoke truncate on table "public"."trigger" from "anon";

revoke update on table "public"."trigger" from "anon";

revoke delete on table "public"."trigger" from "authenticated";

revoke insert on table "public"."trigger" from "authenticated";

revoke references on table "public"."trigger" from "authenticated";

revoke select on table "public"."trigger" from "authenticated";

revoke trigger on table "public"."trigger" from "authenticated";

revoke truncate on table "public"."trigger" from "authenticated";

revoke update on table "public"."trigger" from "authenticated";

revoke delete on table "public"."trigger" from "service_role";

revoke insert on table "public"."trigger" from "service_role";

revoke references on table "public"."trigger" from "service_role";

revoke select on table "public"."trigger" from "service_role";

revoke trigger on table "public"."trigger" from "service_role";

revoke truncate on table "public"."trigger" from "service_role";

revoke update on table "public"."trigger" from "service_role";

alter table "public"."images_to_remove" drop constraint "images_to_remove_pkey";

alter table "public"."images_to_upload" drop constraint "images_to_upload_pkey";

alter table "public"."trigger" drop constraint "trigger_pkey";

drop index if exists "public"."images_to_remove_pkey";

drop index if exists "public"."images_to_upload_pkey";

drop index if exists "public"."trigger_pkey";

drop table "public"."images_to_remove";

drop table "public"."images_to_upload";

drop table "public"."trigger";
</file>

<file path="supabase/.gitignore">
# Supabase
.branches
.temp
.env
</file>

<file path="supabase/config.toml">
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "metvuw-mobile"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. public and storage are always included.
schemas = ["public", "storage", "graphql_public"]
# Extra schemas to add to the search_path of every request. public is always included.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv6)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = true
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }} ."

# Use pre-defined map of phone number to OTP for testing.
[auth.sms.test_otp]
# 4152127777 = "123456"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
[auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"


# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""

[analytics]
enabled = false
port = 54327
vector_port = 54328
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"
</file>

<file path="testing/html/nzRegion.ts">
export const nzForecastHtml =
  '\n' +
  '\n' +
  '<html>\n' +
  '<head>\n' +
  '<script data-ad-client="ca-pub-7608496043286617" async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\n' +
  '\n' +
  '<meta http-equiv="expires" content="0">\n' +
  '\n' +
  '<link rel="shortcut icon" href="http://metvuw.com/favicon.ico" />\n' +
  '\n' +
  '<style type="text/css">\n' +
  'body\n' +
  '{\n' +
  '\tcolor: white;\n' +
  '\tfont-size: 11px;\n' +
  '\tfont-family: arial;\n' +
  '\tbackground-color: #000033;\n' +
  '\n' +
  '\n' +
  '}\n' +
  'p\n' +
  '{\n' +
  '\tcolor: white;\n' +
  '\tfont-family: arial;\n' +
  '\tfont-size: 12px;\n' +
  '}\n' +
  '      h1 { \tcolor: white; font-family : helvetica;  font-size : 18px;}\n' +
  '      h2 { \tcolor: white; font-family : helvetica;  font-size : 14px;}\n' +
  '      h3 { \tcolor: white; font-family : helvetica;  font-size : 12px;}\n' +
  '      \n' +
  '      \n' +
  'table\n' +
  '{\n' +
  '\tcolor: white;\n' +
  '\tfont-size: 11px;\n' +
  '\tfont-family: arial;\n' +
  '\n' +
  '}\n' +
  '\n' +
  'a {\n' +
  '\tcolor: #FFFF99;\n' +
  '\t\ttext-decoration: none;\n' +
  '\n' +
  '}\n' +
  '\n' +
  'a:hover {\n' +
  '\ttext-decoration: underline;\n' +
  '\tcolor: #FFCC00;\n' +
  '}\n' +
  '\n' +
  'a:visited {\n' +
  '\tcolor: #FFCC00;\n' +
  '}\n' +
  '\n' +
  '\n' +
  '\n' +
  '\n' +
  '</style>\n' +
  '\n' +
  '\n' +
  '<title>New Zealand Weather Forecast</title><SCRIPT LANGUAGE="JavaScript"><!--\n' +
  'var js = 1.0;\n' +
  '\n' +
  'Version = parseInt(navigator.appVersion);\n' +
  '\n' +
  'if (navigator.appName == "Netscape")\n' +
  '    js = ((Version >= 4) ? 1.2 : ( (Version == 3) ? 1.1 : 1.0 ));\n' +
  'else\n' +
  "    if (navigator.appVersion.indexOf('MSIE') != -1) \n" +
  '        js = ((Version >= 4) ? 1.1 : 1.0);\n' +
  '\n' +
  'function changeImages(oldImage,newImage) {\n' +
  '    if (js > 1.0) document [oldImage].src = eval(newImage + ".src");\n' +
  '}\n' +
  '\n' +
  'if (js > 1.0) {\n' +
  '    a1 = new Image();\n' +
  '    a1.src  = "../pageheaders/bar.png";\n' +
  '\n' +
  '    b1 = new Image();\n' +
  '    b1.src  = "../pageheaders/bar_h.png";\n' +
  '\n' +
  '    b2 = new Image();\n' +
  '    b2.src  = "../pageheaders/bar_s.png";\n' +
  '\n' +
  '    b3 = new Image();\n' +
  '    b3.src  = "../pageheaders/bar_r.png";\n' +
  '\n' +
  '    b4 = new Image();\n' +
  '    b4.src  = "../pageheaders/bar_u.png";\n' +
  '\n' +
  '    b5 = new Image();\n' +
  '    b5.src  = "../pageheaders/bar_f.png";\n' +
  '\n' +
  '    b6 = new Image();\n' +
  '    b6.src  = "../pageheaders/bar_n.png";\n' +
  '\n' +
  '    b7 = new Image();\n' +
  '    b7.src  = "../pageheaders/bar_o.png";\n' +
  '}\n' +
  '\n' +
  '//-->\n' +
  '</SCRIPT>\n' +
  '\n' +
  '<MAP NAME="image-map1">\n' +
  '<area shape="rect" coords="44,3,154,18" href="../index.php"\n' +
  "   onMouseOver=\"changeImages('image1','b1')\"\n" +
  "   onMouseOut=\"changeImages('image1','a1')\">\n" +
  '\n' +
  '<area shape="rect" coords="161,3,271,18" href="../satellite"\n' +
  "   onMouseOver=\"changeImages('image1','b2')\"\n" +
  "   onMouseOut=\"changeImages('image1','a1')\">\n" +
  '\n' +
  '<area shape="rect" coords="278,3,388,18" href="../radar/radar.php?location=nz"\n' +
  "   onMouseOver=\"changeImages('image1','b3')\"\n" +
  "   onMouseOut=\"changeImages('image1','a1')\">\n" +
  '\n' +
  '<area shape="rect" coords="395,3,505,18" href="../upperair"\n' +
  "   onMouseOver=\"changeImages('image1','b4')\"\n" +
  "   onMouseOut=\"changeImages('image1','a1')\">\n" +
  '\n' +
  '<area shape="rect" coords="512,3,622,18" href="../forecast"\n' +
  "   onMouseOver=\"changeImages('image1','b5')\"\n" +
  "   onMouseOut=\"changeImages('image1','a1')\">\n" +
  '\n' +
  '<area shape="rect" coords="629,3,739,18" href="../nzweather"\n' +
  "   onMouseOver=\"changeImages('image1','b6')\"\n" +
  "   onMouseOut=\"changeImages('image1','a1')\">\n" +
  '\n' +
  '<area shape="rect" coords="746,0,856,21" href="../ows"\n' +
  "   onMouseOver=\"changeImages('image1','b7')\"\n" +
  "   onMouseOut=\"changeImages('image1','a1')\">\n" +
  '</MAP>\n' +
  '\n' +
  '<IMG SRC="../pageheaders/banner.png" BORDER=0 WIDTH=900 HEIGHT=72><br>\n' +
  '<IMG NAME="image1" SRC="../pageheaders/bar.png" BORDER=0 WIDTH=900 HEIGHT=24 USEMAP="#image-map1"><br>\n' +
  '<IMG SRC="../pageheaders/dummy.png" BORDER=0 WIDTH=900 HEIGHT=4">\n' +
  '\n' +
  '<!-- <IMG SRC="../pageheaders/metvuw-banner-new.png" BORDER=0 WIDTH=970 HEIGHT=70><br> -->\n' +
  '\n' +
  '<body>\n' +
  '<br>\n' +
  '<table width="900" border="0" cellpadding="1" cellspacing="1">\n' +
  '<tr>\n' +
  '<td>\n' +
  '<center>\n' +
  '<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\n' +
  '<!-- big -->\n' +
  '<ins class="adsbygoogle"\n' +
  '     style="display:inline-block;width:720px;height:90px"\n' +
  '     data-ad-client="ca-pub-7608496043286617"\n' +
  '     data-ad-slot="8591559068"></ins>\n' +
  '<script>\n' +
  '(adsbygoogle = window.adsbygoogle || []).push({});\n' +
  '</script></CENTER>\n' +
  '</td>\n' +
  '</tr>\n' +
  '</table>\n' +
  '<br>\n' +
  '<table width="900" border="0" cellpadding="1" cellspacing="1">\n' +
  '<tr>\n' +
  '<td>\n' +
  '<H1><center><table width="900" border="0" align="center" cellspacing="3" bgcolor=#000033><tr bgcolor=#444477>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=wind850&region=nz&noofdays=10">NZ Upper Winds</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=nz&noofdays=10">New Zealand</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=nzni&noofdays=10">North Island</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=nzsi&noofdays=10">South Island</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=ocean&noofdays=10">NZ - Fiji</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=newcaledonia&noofdays=10">New Caledonia</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=fiji&noofdays=10">Fiji</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=swp&noofdays=10">South West Pacific</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=spacific&noofdays=10">South Pacific</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=pacific&noofdays=10">Pacific Islands</a></center></td></tr></table><table width="900" border="0" align="center" cellspacing="3" bgcolor=#000033><tr bgcolor=#444477>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=swaussie&noofdays=10">Perth WA</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=waussie&noofdays=10">W Australia</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=saussie&noofdays=10">S Australia</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=seaussie&noofdays=10">SE Australia</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=queensland&noofdays=10">Queensland</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=nsw&noofdays=10">NSW</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=victoria&noofdays=10">Victoria and Tasmania</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=samoa&noofdays=10">Samoa</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=tonga&noofdays=10">Tonga</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=cooks&noofdays=10">Cook Islands</a></center></td></tr></table><br>Forecasts issued at:- 0600 NZST Tue 17 May 2022 (1800 GMT Mon 16 May 2022)</center></H1>\n' +
  '<!-- \n' +
  'echo "Forecasts issued at:- ",gmdate("Hi T D j M Y", gmmktime($hour, 0, 0, $month, $day, $year))," (",date("Hi T D j M Y", gmmktime($hour, 0, 0, $month, $day, $year)),")"; ?></center></H1>\n' +
  ' -->\n' +
  '\n' +
  '<table width="676" border="0" cellpadding="1" cellspacing="1" align="center">\n' +
  '\n' +
  '<table width="924" border="0" cellpadding="1" cellspacing="1" align="center"><tr><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=006\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-006.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=012\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-012.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=018\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-018.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=024\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-024.gif" border="0" width="220" height="186"></a></td><td><IMG SRC="../pageheaders/scale.gif" width="24" border="0" height="186"></td></tr><tr><td><center></center></td><td><center></center></td><td><center></center></td><td><center></center></td></tr><tr><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=030\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-030.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=036\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-036.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=042\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-042.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=048\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-048.gif" border="0" width="220" height="186"></a></td><td><IMG SRC="../pageheaders/scale.gif" width="24" border="0" height="186"></td></tr><tr><td><center></center></td><td><center></center></td><td><center></center></td><td><center></center></td></tr><tr><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=054\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-054.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=060\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-060.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=066\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-066.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=072\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-072.gif" border="0" width="220" height="186"></a></td><td><IMG SRC="../pageheaders/scale.gif" width="24" border="0" height="186"></td></tr><tr><td><center></center></td><td><center></center></td><td><center></center></td><td><center></center></td></tr><tr><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=078\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-078.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=084\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-084.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=090\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-090.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=096\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-096.gif" border="0" width="220" height="186"></a></td><td><IMG SRC="../pageheaders/scale.gif" width="24" border="0" height="186"></td></tr><tr><td><center></center></td><td><center></center></td><td><center></center></td><td><center></center></td></tr><tr><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=102\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-102.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=108\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-108.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=114\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-114.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=120\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-120.gif" border="0" width="220" height="186"></a></td><td><IMG SRC="../pageheaders/scale.gif" width="24" border="0" height="186"></td></tr><tr><td><center></center></td><td><center></center></td><td><center></center></td><td><center></center></td></tr><tr><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=126\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-126.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=132\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-132.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=138\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-138.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=144\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-144.gif" border="0" width="220" height="186"></a></td><td><IMG SRC="../pageheaders/scale.gif" width="24" border="0" height="186"></td></tr><tr><td><center></center></td><td><center></center></td><td><center></center></td><td><center></center></td></tr><tr><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=150\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-150.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=156\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-156.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=162\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-162.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=168\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-168.gif" border="0" width="220" height="186"></a></td><td><IMG SRC="../pageheaders/scale.gif" width="24" border="0" height="186"></td></tr><tr><td><center></center></td><td><center></center></td><td><center></center></td><td><center></center></td></tr><tr><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=174\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-174.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=180\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-180.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=186\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-186.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=192\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-192.gif" border="0" width="220" height="186"></a></td><td><IMG SRC="../pageheaders/scale.gif" width="24" border="0" height="186"></td></tr><tr><td><center></center></td><td><center></center></td><td><center></center></td><td><center></center></td></tr><tr><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=198\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-198.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=204\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-204.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=210\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-210.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=216\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-216.gif" border="0" width="220" height="186"></a></td><td><IMG SRC="../pageheaders/scale.gif" width="24" border="0" height="186"></td></tr><tr><td><center></center></td><td><center></center></td><td><center></center></td><td><center></center></td></tr><tr><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=222\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-222.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=228\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-228.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=234\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-234.gif" border="0" width="220" height="186"></a></td><td><a href="#" onClick="MyWindow50=window.open(\'forecast1.php?type=rain&region=nz&tim=240\',\'MyWindow50\',\'toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes,width=1110,height=1110\'); return false;"><IMG SRC="./2022051618/rain-nz-thumb-2022051618-240.gif" border="0" width="220" height="186"></a></td><td><IMG SRC="../pageheaders/scale.gif" width="24" border="0" height="186"></td></tr><tr><td><center></center></td><td><center></center></td><td><center></center></td><td><center></center></td></tr></table><p>  \n' +
  '  \n' +
  '  \n' +
  '\n' +
  '\n' +
  '\n' +
  '    <table width="900" border="0" align="center" cellspacing="3" bgcolor=#000033><tr bgcolor=#444477>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=nz&noofdays=1">1-day</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=nz&noofdays=3">3-day</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=nz&noofdays=4">4-day</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=nz&noofdays=5">5-day</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=nz&noofdays=6">6-day</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=nz&noofdays=7">7-day</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=nz&noofdays=8">8-day</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=nz&noofdays=10">10-day</a></center></td></tr></table><table width="900" border="0" align="center" cellspacing="3" bgcolor=#000033><tr bgcolor=#444477>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=world&noofdays=10">World</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=pitcairn&noofdays=10">Pitcairn</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=europe&noofdays=10">Europe</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=uk&noofdays=10">UK</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=estonia&noofdays=10">Estonia</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=westmed&noofdays=10">Western Mediterranean</a></center></td></tr></table><table width="900" border="0" align="center" cellspacing="3" bgcolor=#000033><tr bgcolor=#444477>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=turkey&noofdays=10">Turkey</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=japan&noofdays=10">Japan</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=usa&noofdays=10">USA</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=safrica&noofdays=10">Southern Africa</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=natlantic&noofdays=10">North Atlantic</a></center></td>   <td><center><a href="http://metvuw.com/forecast/forecast.php?type=rain&region=satlantic&noofdays=10">South Atlantic</a></center></td></tr></table>\n' +
  '<center>\n' +
  '<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\n' +
  '<!-- big -->\n' +
  '<ins class="adsbygoogle"\n' +
  '     style="display:inline-block;width:720px;height:90px"\n' +
  '     data-ad-client="ca-pub-7608496043286617"\n' +
  '     data-ad-slot="8591559068"></ins>\n' +
  '<script>\n' +
  '(adsbygoogle = window.adsbygoogle || []).push({});\n' +
  '</script></CENTER>\n' +
  '<br>\n' +
  '<center>\n' +
  '<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\n' +
  '<!-- big -->\n' +
  '<ins class="adsbygoogle"\n' +
  '     style="display:inline-block;width:720px;height:90px"\n' +
  '     data-ad-client="ca-pub-7608496043286617"\n' +
  '     data-ad-slot="8591559068"></ins>\n' +
  '<script>\n' +
  '(adsbygoogle = window.adsbygoogle || []).push({});\n' +
  '</script></CENTER>\n' +
  '\n' +
  '\n' +
  '\n' +
  '\n' +
  '<center>New Zealand Weather Forecast</center><center>from metvuw.com - James McGregor<br> &copy;metvuw\n' +
  '2022</center>\n' +
  '<center>Powered by GMT</center>\n' +
  '</tr>\n' +
  '\n' +
  '</table>\n' +
  '\n' +
  '<script type="text/javascript">\n' +
  'var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");\n' +
  'document.write(unescape("%3Cscript src=\'" + gaJsHost + "google-analytics.com/ga.js\' type=\'text/javascript\'%3E%3C/script%3E"));\n' +
  '</script>\n' +
  '<script type="text/javascript">\n' +
  'var pageTracker = _gat._getTracker("UA-3413050-1");\n' +
  'pageTracker._initData();\n' +
  'pageTracker._trackPageview();\n' +
  '</script>\n' +
  '</BODY>\n' +
  '</HTML>\n' +
  '\n' +
  '\n'
</file>

<file path="testing/html/satellite.ts">
export const satelliteHtml =
  '<html><script type="module" src="chrome-extension://jdkknkkbebbapilgoeccciglkfbmbnfm/hook.js"></script><head>\n' +
  '  <script data-ad-client="ca-pub-7608496043286617" async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\n' +
  '\n' +
  '  <meta http-equiv="expires" content="0">\n' +
  '\n' +
  '  <link rel="shortcut icon" href="http://metvuw.com/favicon.ico">\n' +
  '\n' +
  '  <style type="text/css">\n' +
  '    body\n' +
  '    {\n' +
  '      color: white;\n' +
  '      font-size: 11px;\n' +
  '      font-family: arial;\n' +
  '      background-color: #000033;\n' +
  '\n' +
  '\n' +
  '    }\n' +
  '    p\n' +
  '    {\n' +
  '      color: white;\n' +
  '      font-family: arial;\n' +
  '      font-size: 12px;\n' +
  '    }\n' +
  '    h1 { \tcolor: white; font-family : helvetica;  font-size : 18px;}\n' +
  '    h2 { \tcolor: white; font-family : helvetica;  font-size : 14px;}\n' +
  '    h3 { \tcolor: white; font-family : helvetica;  font-size : 12px;}\n' +
  '\n' +
  '\n' +
  '    table\n' +
  '    {\n' +
  '      color: white;\n' +
  '      font-size: 11px;\n' +
  '      font-family: arial;\n' +
  '\n' +
  '    }\n' +
  '\n' +
  '    a {\n' +
  '      color: #FFFF99;\n' +
  '      text-decoration: none;\n' +
  '\n' +
  '    }\n' +
  '\n' +
  '    a:hover {\n' +
  '      text-decoration: underline;\n' +
  '      color: #FFCC00;\n' +
  '    }\n' +
  '\n' +
  '    a:visited {\n' +
  '      color: #FFCC00;\n' +
  '    }\n' +
  '\n' +
  '\n' +
  '\n' +
  '\n' +
  '  </style>\n' +
  '\n' +
  '  <title>New Zealand Weather - satellite data</title>\n' +
  '  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">\n' +
  '  <meta name="description" content="MetVUW: New Zealand Weather Forecasts and Australian Weather Forecasts and World Weather Forecasts">\n' +
  '  <meta name="keywords" content="new zealand,zealand,weather,aoteoroa,free,new zealand weather, australian weather, australian weather forecasts, weather forecast,forecasts,climate,new zealand climate,weather forecasts,photography, weather photos, rain,wind,ocean,pacific,rainfall,maps,weather maps,radar,satellite,auckland,wellington,christchurch,dunedin,fishing,sailing,gliding,skiing,snow,surfing,surf,tramping,rain,hail,">\n' +
  '  <meta name="copyright" content="metvuw.com">\n' +
  '  <meta http-equiv="CACHE-CONTROL" content="NO-CACHE">\n' +
  '  <script language="JavaScript"><!--\n' +
  '  var js = 1.0;\n' +
  '\n' +
  '  Version = parseInt(navigator.appVersion);\n' +
  '\n' +
  '  if (navigator.appName == "Netscape")\n' +
  '    js = ((Version >= 4) ? 1.2 : ( (Version == 3) ? 1.1 : 1.0 ));\n' +
  '  else\n' +
  "  if (navigator.appVersion.indexOf('MSIE') != -1)\n" +
  '    js = ((Version >= 4) ? 1.1 : 1.0);\n' +
  '\n' +
  '  function changeImages(oldImage,newImage) {\n' +
  '    if (js > 1.0) document [oldImage].src = eval(newImage + ".src");\n' +
  '  }\n' +
  '\n' +
  '  if (js > 1.0) {\n' +
  '    a1 = new Image();\n' +
  '    a1.src  = "../pageheaders/bar.png";\n' +
  '\n' +
  '    b1 = new Image();\n' +
  '    b1.src  = "../pageheaders/bar_h.png";\n' +
  '\n' +
  '    b2 = new Image();\n' +
  '    b2.src  = "../pageheaders/bar_s.png";\n' +
  '\n' +
  '    b3 = new Image();\n' +
  '    b3.src  = "../pageheaders/bar_r.png";\n' +
  '\n' +
  '    b4 = new Image();\n' +
  '    b4.src  = "../pageheaders/bar_u.png";\n' +
  '\n' +
  '    b5 = new Image();\n' +
  '    b5.src  = "../pageheaders/bar_f.png";\n' +
  '\n' +
  '    b6 = new Image();\n' +
  '    b6.src  = "../pageheaders/bar_n.png";\n' +
  '\n' +
  '    b7 = new Image();\n' +
  '    b7.src  = "../pageheaders/bar_o.png";\n' +
  '  }\n' +
  '\n' +
  '  //-->\n' +
  '  </script>\n' +
  '\n' +
  '  <meta name="d41d8cd98f00b204e9800998ecf8427e_lib_detect" id="d41d8cd98f00b204e9800998ecf8427e_lib_detect"><script src="chrome-extension://cgaocdmhkmfnkdkbnckgmpopcbpaaejo/../library/libraries.js"></script><script src="chrome-extension://cgaocdmhkmfnkdkbnckgmpopcbpaaejo/content_scripts/lib_detect.js"></script></head><body><map name="image-map1">\n' +
  '  <area shape="rect" coords="44,3,154,18" href="../index.php" onmouseover="changeImages(\'image1\',\'b1\')" onmouseout="changeImages(\'image1\',\'a1\')">\n' +
  '\n' +
  '  <area shape="rect" coords="161,3,271,18" href="../satellite" onmouseover="changeImages(\'image1\',\'b2\')" onmouseout="changeImages(\'image1\',\'a1\')">\n' +
  '\n' +
  '  <area shape="rect" coords="278,3,388,18" href="../radar/radar.php?location=nz" onmouseover="changeImages(\'image1\',\'b3\')" onmouseout="changeImages(\'image1\',\'a1\')">\n' +
  '\n' +
  '  <area shape="rect" coords="395,3,505,18" href="../upperair" onmouseover="changeImages(\'image1\',\'b4\')" onmouseout="changeImages(\'image1\',\'a1\')">\n' +
  '\n' +
  '  <area shape="rect" coords="512,3,622,18" href="../forecast" onmouseover="changeImages(\'image1\',\'b5\')" onmouseout="changeImages(\'image1\',\'a1\')">\n' +
  '\n' +
  '  <area shape="rect" coords="629,3,739,18" href="../nzweather" onmouseover="changeImages(\'image1\',\'b6\')" onmouseout="changeImages(\'image1\',\'a1\')">\n' +
  '\n' +
  '  <area shape="rect" coords="746,0,856,21" href="../ows" onmouseover="changeImages(\'image1\',\'b7\')" onmouseout="changeImages(\'image1\',\'a1\')">\n' +
  '</map>\n' +
  '\n' +
  '<img src="../pageheaders/banner.png" border="0" width="900" height="72"><br>\n' +
  '<img name="image1" src="https://metvuw.com/pageheaders/bar.png" border="0" width="900" height="24" usemap="#image-map1"><br>\n' +
  '<img src="../pageheaders/dummy.png" border="0" width="900" height="4&quot;">\n' +
  '\n' +
  '<!-- <IMG SRC="../pageheaders/metvuw-banner-new.png" BORDER=0 WIDTH=970 HEIGHT=70><br> -->\n' +
  '<!--?\n' +
  '\n' +
  '$counter_file = "../satellite/index-count";\n' +
  '\n' +
  'if(!($fp = fopen($counter_file, "r"))) die ("Cannot open $counter_file.");\n' +
  '$counter = (int) fread($fp,20);\n' +
  'fclose($fp);\n' +
  '\n' +
  '$counter++;\n' +
  '\n' +
  'if(!($fp = fopen($counter_file, "w"))) die ("Cannot open $counter_file.");\n' +
  'fwrite($fp, $counter);\n' +
  'fclose($fp);\n' +
  '\n' +
  '$log_file = "../satellite/index-log";\n' +
  '\n' +
  'if(!($fp = fopen($log_file, "a"))) die ("Cannot open $log_file.");\n' +
  '$date = gmdate("YmdHis");\n' +
  '$date = gmdate("d M Y H:i:s");\n' +
  '$remote_addr=getenv(REMOTE_ADDR);\n' +
  '$string = "$counter $date $remote_addr\\n";\n' +
  '\n' +
  'fputs($fp, $string);\n' +
  'fclose($fp);\n' +
  '\n' +
  '?-->\n' +
  '\n' +
  '\n' +
  '<table width="900" cellspacing="0" border="0" cellpadding="0">\n' +
  '  <tbody><tr>\n' +
  '    <td>\n' +
  '\n' +
  '      <center>\n' +
  '        <script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\n' +
  '        <!-- big -->\n' +
  '        <ins class="adsbygoogle" style="display:inline-block;width:720px;height:90px" data-ad-client="ca-pub-7608496043286617" data-ad-slot="8591559068"></ins>\n' +
  '        <script>\n' +
  '          (adsbygoogle = window.adsbygoogle || []).push({});\n' +
  '        </script></center>\n' +
  '\n' +
  '    </td>\n' +
  '  </tr>\n' +
  '  </tbody></table>\n' +
  '\n' +
  '\n' +
  '<basefont face="Verdana, Arial, Helvetica, MS Sans Serif"><table width="900" border="0">\n' +
  '  <tbody><tr>\n' +
  '    <td><div align="center">\n' +
  '      <h2>Click on any thumbnail to see bigger image</h2>\n' +
  '      <div align="center">\n' +
  '      </div><div align="center">\n' +
  '    </div><table width="860" border="0">\n' +
  '      <tbody><tr>\n' +
  '        <td> <a href="./satellite.php?ihour=24?"><img src="./small/202205160300.jpg\n' +
  '" border="0" width="280" height="210"></a></td>\n' +
  '        <td> <a href="./satellite.php?ihour=21?"><img src="./small/202205160600.jpg\n' +
  '" border="0" width="280" height="210"></a></td>\n' +
  '        <td> <a href="./satellite.php?ihour=18?"><img src="./small/202205160900.jpg\n' +
  '" border="0" width="280" height="210"></a></td>\n' +
  '      </tr>\n' +
  '      <!--\n' +
  '      <tr><div align="center">\n' +
  '      <td><center><p>03:00 Monday 16 May 2022 (UTC)</p></center></td>\n' +
  '      <td><center><p>06:00 Monday 16 May 2022 (UTC)</p></center></td>\n' +
  '      <td><center><p>09:00 Monday 16 May 2022 (UTC)</p></center></td>\n' +
  '      </div></tr>\n' +
  '       -->\n' +
  '      <tr><td> <a href="./satellite.php?ihour=15?"><img src="./small/202205161200.jpg\n' +
  '" border="0" width="280" height="210"></a></td>\n' +
  '        <td> <a href="./satellite.php?ihour=12?"><img src="./small/202205161500.jpg\n' +
  '" border="0" width="280" height="210"></a></td>\n' +
  '        <td> <a href="./satellite.php?ihour=9?"><img src="./small/202205161800.jpg\n' +
  '" border="0" width="280" height="210"></a></td>\n' +
  '      </tr>\n' +
  '      <!--\n' +
  '      <tr><div align="center">\n' +
  '      <td><center><p>12:00 Monday 16 May 2022 (UTC)</p></center></td>\n' +
  '      <td><center><p>15:00 Monday 16 May 2022 (UTC)</p></center></td>\n' +
  '      <td><center><p>18:00 Monday 16 May 2022 (UTC)</p></center></td>\n' +
  '      </div></tr>\n' +
  '       -->\n' +
  '      <tr><td> <a href="./satellite.php?ihour=6?"><img src="./small/202205162100.jpg\n' +
  '" border="0" width="280" height="210"></a></td>\n' +
  '        <td> <a href="./satellite.php?ihour=3?"><img src="./small/202205170000.jpg\n' +
  '" border="0" width="280" height="210"></a></td>\n' +
  '        <td> <a href="./satellite.php?ihour=0?"><img src="./small/202205170300.jpg\n' +
  '" border="0" width="280" height="210"></a></td>\n' +
  '      </tr>\n' +
  '      <!--\n' +
  '      <tr><div align="center">\n' +
  '      <td><center><p>21:00 Monday 16 May 2022 (UTC)</p></center></td>\n' +
  '      <td><center><p>00:00 Tuesday 17 May 2022 (UTC)</p></center></td>\n' +
  '      <td><center><p>03:00 Tuesday 17 May 2022 (UTC)</p></center></td>\n' +
  '              </tr>\n' +
  '       -->\n' +
  '      </tbody></table>\n' +
  '    </div></td>\n' +
  '  </tr>\n' +
  '  </tbody></table>\n' +
  '\n' +
  '<br>\n' +
  '\n' +
  '<table width="900" cellspacing="0" border="0" cellpadding="0">\n' +
  '  <tbody><tr>\n' +
  '    <td>\n' +
  '\n' +
  '      <center>\n' +
  '        <script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\n' +
  '        <!-- big -->\n' +
  '        <ins class="adsbygoogle" style="display:inline-block;width:720px;height:90px" data-ad-client="ca-pub-7608496043286617" data-ad-slot="8591559068"></ins>\n' +
  '        <script>\n' +
  '          (adsbygoogle = window.adsbygoogle || []).push({});\n' +
  '        </script></center>\n' +
  '\n' +
  '    </td>\n' +
  '  </tr>\n' +
  '  </tbody></table>\n' +
  '\n' +
  '\n' +
  '<table width="900">\n' +
  '  <tbody><tr>\n' +
  '    <td align="center">\n' +
  '      <p>\n' +
  '        <br>\n' +
  '        Image enhancement by <a href="http://www.metvuw.com"><img name="metvuw" src="../pageheaders/metvuw-logo.png" height="20" border="0"></a>\n' +
  '        <br>\n' +
  '        Data provided by <img name="metservice" src="../pageheaders/metservice-logo.png" height="20" border="0">\n' +
  '        <br>\n' +
  '        MTSAT satellite data courtesy of Japanese Meteorological Agency (JMA)\n' +
  '      </p>\n' +
  '    </td>\n' +
  '  </tr></tbody></table><table width="900">\n' +
  '  <tbody><tr>\n' +
  '    <td align="center">\n' +
  '      Metvuw.com - NZ Weather Site - James McGregor<br> ©Metvuw 2022</td>\n' +
  '  </tr></tbody></table>\n' +
  '\n' +
  '<script type="text/javascript">\n' +
  '  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");\n' +
  '  document.write(unescape("%3Cscript src=\'" + gaJsHost + "google-analytics.com/ga.js\' type=\'text/javascript\'%3E%3C/script%3E"));\n' +
  '</script><script src="https://ssl.google-analytics.com/ga.js" type="text/javascript"></script>\n' +
  '<script type="text/javascript">\n' +
  '  var pageTracker = _gat._getTracker("UA-3413050-1");\n' +
  '  pageTracker._initData();\n' +
  '  pageTracker._trackPageview();\n' +
  '</script>\n' +
  '\n' +
  '\n' +
  '</body></html>'
</file>

<file path="testing/nz.ts">
// import { RainChartData } from '@/shared/types/rainChartData'
//
// export const nzRegionCharts: RainChartData[] = [
//   {
//     day: 16,
//     forecastDate: '2022-05-17T00:00:00.000Z',
//     height: 186,
//     hour: 18,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     imageDateUTC: 1652724000000,
//     month: 4,
//     offset: 6,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-006.gif',
//     width: 220,
//     year: 2022,
//     publicUrl: '',
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-17T06:00:00.000Z',
//     offset: 12,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-012.gif',
//     width: 220,
//     height: 186
//     publicUrl: '',
//
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-17T12:00:00.000Z',
//     offset: 18,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-018.gif',
//     width: 220,
//     height: 186,
//     publicUrl: '',
//
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-17T18:00:00.000Z',
//     offset: 24,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-024.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-18T00:00:00.000Z',
//     offset: 30,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-030.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-18T06:00:00.000Z',
//     offset: 36,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-036.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-18T12:00:00.000Z',
//     offset: 42,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-042.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-18T18:00:00.000Z',
//     offset: 48,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-048.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-19T00:00:00.000Z',
//     offset: 54,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-054.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-19T06:00:00.000Z',
//     offset: 60,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-060.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-19T12:00:00.000Z',
//     offset: 66,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-066.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-19T18:00:00.000Z',
//     offset: 72,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-072.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-20T00:00:00.000Z',
//     offset: 78,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-078.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-20T06:00:00.000Z',
//     offset: 84,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-084.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-20T12:00:00.000Z',
//     offset: 90,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-090.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-20T18:00:00.000Z',
//     offset: 96,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-096.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-21T00:00:00.000Z',
//     offset: 102,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-102.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-21T06:00:00.000Z',
//     offset: 108,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-108.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-21T12:00:00.000Z',
//     offset: 114,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-114.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-21T18:00:00.000Z',
//     offset: 120,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-120.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-22T00:00:00.000Z',
//     offset: 126,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-126.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-22T06:00:00.000Z',
//     offset: 132,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-132.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-22T12:00:00.000Z',
//     offset: 138,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-138.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-22T18:00:00.000Z',
//     offset: 144,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-144.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-23T00:00:00.000Z',
//     offset: 150,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-150.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-23T06:00:00.000Z',
//     offset: 156,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-156.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-23T12:00:00.000Z',
//     offset: 162,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-162.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-23T18:00:00.000Z',
//     offset: 168,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-168.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-24T00:00:00.000Z',
//     offset: 174,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-174.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-24T06:00:00.000Z',
//     offset: 180,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-180.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-24T12:00:00.000Z',
//     offset: 186,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-186.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-24T18:00:00.000Z',
//     offset: 192,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-192.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-25T00:00:00.000Z',
//     offset: 198,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-198.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-25T06:00:00.000Z',
//     offset: 204,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-204.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-25T12:00:00.000Z',
//     offset: 210,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-210.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-25T18:00:00.000Z',
//     offset: 216,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-216.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-26T00:00:00.000Z',
//     offset: 222,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-222.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-26T06:00:00.000Z',
//     offset: 228,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-228.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-26T12:00:00.000Z',
//     offset: 234,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-234.gif',
//     width: 220,
//     height: 186,
//   },
//   {
//     year: 2022,
//     month: 4,
//     day: 16,
//     hour: 18,
//     imageDateUTC: 1652724000000,
//     imageDateISO: '2022-05-16T18:00:00.000Z',
//     forecastDate: '2022-05-26T18:00:00.000Z',
//     offset: 240,
//     url: 'https://dpucyvo9dklo9.cloudfront.net/forecast/2022051618/rain-nz-thumb-2022051618-240.gif',
//     width: 220,
//     height: 186,
//   },
// ]
</file>

<file path="tests-examples/demo-todo-app.spec.ts">
import { test, expect, type Page } from '@playwright/test'

test.beforeEach(async ({ page }) => {
  await page.goto('https://demo.playwright.dev/todomvc')
})

const TODO_ITEMS = [
  'buy some cheese',
  'feed the cat',
  'book a doctors appointment',
]

test.describe('New Todo', () => {
  test('should allow me to add todo items', async ({ page }) => {
    // create a new todo locator
    const newTodo = page.getByPlaceholder('What needs to be done?')

    // Create 1st todo.
    await newTodo.fill(TODO_ITEMS[0])
    await newTodo.press('Enter')

    // Make sure the list only has one todo item.
    await expect(page.getByTestId('todo-title')).toHaveText([TODO_ITEMS[0]])

    // Create 2nd todo.
    await newTodo.fill(TODO_ITEMS[1])
    await newTodo.press('Enter')

    // Make sure the list now has two todo items.
    await expect(page.getByTestId('todo-title')).toHaveText([
      TODO_ITEMS[0],
      TODO_ITEMS[1],
    ])

    await checkNumberOfTodosInLocalStorage(page, 2)
  })

  test('should clear text input field when an item is added', async ({
    page,
  }) => {
    // create a new todo locator
    const newTodo = page.getByPlaceholder('What needs to be done?')

    // Create one todo item.
    await newTodo.fill(TODO_ITEMS[0])
    await newTodo.press('Enter')

    // Check that input is empty.
    await expect(newTodo).toBeEmpty()
    await checkNumberOfTodosInLocalStorage(page, 1)
  })

  test('should append new items to the bottom of the list', async ({
    page,
  }) => {
    // Create 3 items.
    await createDefaultTodos(page)

    // create a todo count locator
    const todoCount = page.getByTestId('todo-count')

    // Check test using different methods.
    await expect(page.getByText('3 items left')).toBeVisible()
    await expect(todoCount).toHaveText('3 items left')
    await expect(todoCount).toContainText('3')
    await expect(todoCount).toHaveText(/3/)

    // Check all items in one call.
    await expect(page.getByTestId('todo-title')).toHaveText(TODO_ITEMS)
    await checkNumberOfTodosInLocalStorage(page, 3)
  })
})

test.describe('Mark all as completed', () => {
  test.beforeEach(async ({ page }) => {
    await createDefaultTodos(page)
    await checkNumberOfTodosInLocalStorage(page, 3)
  })

  test.afterEach(async ({ page }) => {
    await checkNumberOfTodosInLocalStorage(page, 3)
  })

  test('should allow me to mark all items as completed', async ({ page }) => {
    // Complete all todos.
    await page.getByLabel('Mark all as complete').check()

    // Ensure all todos have 'completed' class.
    await expect(page.getByTestId('todo-item')).toHaveClass([
      'completed',
      'completed',
      'completed',
    ])
    await checkNumberOfCompletedTodosInLocalStorage(page, 3)
  })

  test('should allow me to clear the complete state of all items', async ({
    page,
  }) => {
    const toggleAll = page.getByLabel('Mark all as complete')
    // Check and then immediately uncheck.
    await toggleAll.check()
    await toggleAll.uncheck()

    // Should be no completed classes.
    await expect(page.getByTestId('todo-item')).toHaveClass(['', '', ''])
  })

  test('complete all checkbox should update state when items are completed / cleared', async ({
    page,
  }) => {
    const toggleAll = page.getByLabel('Mark all as complete')
    await toggleAll.check()
    await expect(toggleAll).toBeChecked()
    await checkNumberOfCompletedTodosInLocalStorage(page, 3)

    // Uncheck first todo.
    const firstTodo = page.getByTestId('todo-item').nth(0)
    await firstTodo.getByRole('checkbox').uncheck()

    // Reuse toggleAll locator and make sure its not checked.
    await expect(toggleAll).not.toBeChecked()

    await firstTodo.getByRole('checkbox').check()
    await checkNumberOfCompletedTodosInLocalStorage(page, 3)

    // Assert the toggle all is checked again.
    await expect(toggleAll).toBeChecked()
  })
})

test.describe('Item', () => {
  test('should allow me to mark items as complete', async ({ page }) => {
    // create a new todo locator
    const newTodo = page.getByPlaceholder('What needs to be done?')

    // Create two items.
    for (const item of TODO_ITEMS.slice(0, 2)) {
      await newTodo.fill(item)
      await newTodo.press('Enter')
    }

    // Check first item.
    const firstTodo = page.getByTestId('todo-item').nth(0)
    await firstTodo.getByRole('checkbox').check()
    await expect(firstTodo).toHaveClass('completed')

    // Check second item.
    const secondTodo = page.getByTestId('todo-item').nth(1)
    await expect(secondTodo).not.toHaveClass('completed')
    await secondTodo.getByRole('checkbox').check()

    // Assert completed class.
    await expect(firstTodo).toHaveClass('completed')
    await expect(secondTodo).toHaveClass('completed')
  })

  test('should allow me to un-mark items as complete', async ({ page }) => {
    // create a new todo locator
    const newTodo = page.getByPlaceholder('What needs to be done?')

    // Create two items.
    for (const item of TODO_ITEMS.slice(0, 2)) {
      await newTodo.fill(item)
      await newTodo.press('Enter')
    }

    const firstTodo = page.getByTestId('todo-item').nth(0)
    const secondTodo = page.getByTestId('todo-item').nth(1)
    const firstTodoCheckbox = firstTodo.getByRole('checkbox')

    await firstTodoCheckbox.check()
    await expect(firstTodo).toHaveClass('completed')
    await expect(secondTodo).not.toHaveClass('completed')
    await checkNumberOfCompletedTodosInLocalStorage(page, 1)

    await firstTodoCheckbox.uncheck()
    await expect(firstTodo).not.toHaveClass('completed')
    await expect(secondTodo).not.toHaveClass('completed')
    await checkNumberOfCompletedTodosInLocalStorage(page, 0)
  })

  test('should allow me to edit an item', async ({ page }) => {
    await createDefaultTodos(page)

    const todoItems = page.getByTestId('todo-item')
    const secondTodo = todoItems.nth(1)
    await secondTodo.dblclick()
    await expect(secondTodo.getByRole('textbox', { name: 'Edit' })).toHaveValue(
      TODO_ITEMS[1],
    )
    await secondTodo
      .getByRole('textbox', { name: 'Edit' })
      .fill('buy some sausages')
    await secondTodo.getByRole('textbox', { name: 'Edit' }).press('Enter')

    // Explicitly assert the new text value.
    await expect(todoItems).toHaveText([
      TODO_ITEMS[0],
      'buy some sausages',
      TODO_ITEMS[2],
    ])
    await checkTodosInLocalStorage(page, 'buy some sausages')
  })
})

test.describe('Editing', () => {
  test.beforeEach(async ({ page }) => {
    await createDefaultTodos(page)
    await checkNumberOfTodosInLocalStorage(page, 3)
  })

  test('should hide other controls when editing', async ({ page }) => {
    const todoItem = page.getByTestId('todo-item').nth(1)
    await todoItem.dblclick()
    await expect(todoItem.getByRole('checkbox')).not.toBeVisible()
    await expect(
      todoItem.locator('label', {
        hasText: TODO_ITEMS[1],
      }),
    ).not.toBeVisible()
    await checkNumberOfTodosInLocalStorage(page, 3)
  })

  test('should save edits on blur', async ({ page }) => {
    const todoItems = page.getByTestId('todo-item')
    await todoItems.nth(1).dblclick()
    await todoItems
      .nth(1)
      .getByRole('textbox', { name: 'Edit' })
      .fill('buy some sausages')
    await todoItems
      .nth(1)
      .getByRole('textbox', { name: 'Edit' })
      .dispatchEvent('blur')

    await expect(todoItems).toHaveText([
      TODO_ITEMS[0],
      'buy some sausages',
      TODO_ITEMS[2],
    ])
    await checkTodosInLocalStorage(page, 'buy some sausages')
  })

  test('should trim entered text', async ({ page }) => {
    const todoItems = page.getByTestId('todo-item')
    await todoItems.nth(1).dblclick()
    await todoItems
      .nth(1)
      .getByRole('textbox', { name: 'Edit' })
      .fill('    buy some sausages    ')
    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Enter')

    await expect(todoItems).toHaveText([
      TODO_ITEMS[0],
      'buy some sausages',
      TODO_ITEMS[2],
    ])
    await checkTodosInLocalStorage(page, 'buy some sausages')
  })

  test('should remove the item if an empty text string was entered', async ({
    page,
  }) => {
    const todoItems = page.getByTestId('todo-item')
    await todoItems.nth(1).dblclick()
    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('')
    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Enter')

    await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[2]])
  })

  test('should cancel edits on escape', async ({ page }) => {
    const todoItems = page.getByTestId('todo-item')
    await todoItems.nth(1).dblclick()
    await todoItems
      .nth(1)
      .getByRole('textbox', { name: 'Edit' })
      .fill('buy some sausages')
    await todoItems
      .nth(1)
      .getByRole('textbox', { name: 'Edit' })
      .press('Escape')
    await expect(todoItems).toHaveText(TODO_ITEMS)
  })
})

test.describe('Counter', () => {
  test('should display the current number of todo items', async ({ page }) => {
    // create a new todo locator
    const newTodo = page.getByPlaceholder('What needs to be done?')

    // create a todo count locator
    const todoCount = page.getByTestId('todo-count')

    await newTodo.fill(TODO_ITEMS[0])
    await newTodo.press('Enter')

    await expect(todoCount).toContainText('1')

    await newTodo.fill(TODO_ITEMS[1])
    await newTodo.press('Enter')
    await expect(todoCount).toContainText('2')

    await checkNumberOfTodosInLocalStorage(page, 2)
  })
})

test.describe('Clear completed button', () => {
  test.beforeEach(async ({ page }) => {
    await createDefaultTodos(page)
  })

  test('should display the correct text', async ({ page }) => {
    await page.locator('.todo-list li .toggle').first().check()
    await expect(
      page.getByRole('button', { name: 'Clear completed' }),
    ).toBeVisible()
  })

  test('should remove completed items when clicked', async ({ page }) => {
    const todoItems = page.getByTestId('todo-item')
    await todoItems.nth(1).getByRole('checkbox').check()
    await page.getByRole('button', { name: 'Clear completed' }).click()
    await expect(todoItems).toHaveCount(2)
    await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[2]])
  })

  test('should be hidden when there are no items that are completed', async ({
    page,
  }) => {
    await page.locator('.todo-list li .toggle').first().check()
    await page.getByRole('button', { name: 'Clear completed' }).click()
    await expect(
      page.getByRole('button', { name: 'Clear completed' }),
    ).toBeHidden()
  })
})

test.describe('Persistence', () => {
  test('should persist its data', async ({ page }) => {
    // create a new todo locator
    const newTodo = page.getByPlaceholder('What needs to be done?')

    for (const item of TODO_ITEMS.slice(0, 2)) {
      await newTodo.fill(item)
      await newTodo.press('Enter')
    }

    const todoItems = page.getByTestId('todo-item')
    const firstTodoCheck = todoItems.nth(0).getByRole('checkbox')
    await firstTodoCheck.check()
    await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[1]])
    await expect(firstTodoCheck).toBeChecked()
    await expect(todoItems).toHaveClass(['completed', ''])

    // Ensure there is 1 completed item.
    await checkNumberOfCompletedTodosInLocalStorage(page, 1)

    // Now reload.
    await page.reload()
    await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[1]])
    await expect(firstTodoCheck).toBeChecked()
    await expect(todoItems).toHaveClass(['completed', ''])
  })
})

test.describe('Routing', () => {
  test.beforeEach(async ({ page }) => {
    await createDefaultTodos(page)
    // make sure the app had a chance to save updated todos in storage
    // before navigating to a new view, otherwise the items can get lost :(
    // in some frameworks like Durandal
    await checkTodosInLocalStorage(page, TODO_ITEMS[0])
  })

  test('should allow me to display active items', async ({ page }) => {
    const todoItem = page.getByTestId('todo-item')
    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check()

    await checkNumberOfCompletedTodosInLocalStorage(page, 1)
    await page.getByRole('link', { name: 'Active' }).click()
    await expect(todoItem).toHaveCount(2)
    await expect(todoItem).toHaveText([TODO_ITEMS[0], TODO_ITEMS[2]])
  })

  test('should respect the back button', async ({ page }) => {
    const todoItem = page.getByTestId('todo-item')
    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check()

    await checkNumberOfCompletedTodosInLocalStorage(page, 1)

    await test.step('Showing all items', async () => {
      await page.getByRole('link', { name: 'All' }).click()
      await expect(todoItem).toHaveCount(3)
    })

    await test.step('Showing active items', async () => {
      await page.getByRole('link', { name: 'Active' }).click()
    })

    await test.step('Showing completed items', async () => {
      await page.getByRole('link', { name: 'Completed' }).click()
    })

    await expect(todoItem).toHaveCount(1)
    await page.goBack()
    await expect(todoItem).toHaveCount(2)
    await page.goBack()
    await expect(todoItem).toHaveCount(3)
  })

  test('should allow me to display completed items', async ({ page }) => {
    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check()
    await checkNumberOfCompletedTodosInLocalStorage(page, 1)
    await page.getByRole('link', { name: 'Completed' }).click()
    await expect(page.getByTestId('todo-item')).toHaveCount(1)
  })

  test('should allow me to display all items', async ({ page }) => {
    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check()
    await checkNumberOfCompletedTodosInLocalStorage(page, 1)
    await page.getByRole('link', { name: 'Active' }).click()
    await page.getByRole('link', { name: 'Completed' }).click()
    await page.getByRole('link', { name: 'All' }).click()
    await expect(page.getByTestId('todo-item')).toHaveCount(3)
  })

  test('should highlight the currently applied filter', async ({ page }) => {
    await expect(page.getByRole('link', { name: 'All' })).toHaveClass(
      'selected',
    )

    //create locators for active and completed links
    const activeLink = page.getByRole('link', { name: 'Active' })
    const completedLink = page.getByRole('link', { name: 'Completed' })
    await activeLink.click()

    // Page change - active items.
    await expect(activeLink).toHaveClass('selected')
    await completedLink.click()

    // Page change - completed items.
    await expect(completedLink).toHaveClass('selected')
  })
})

async function createDefaultTodos(page: Page) {
  // create a new todo locator
  const newTodo = page.getByPlaceholder('What needs to be done?')

  for (const item of TODO_ITEMS) {
    await newTodo.fill(item)
    await newTodo.press('Enter')
  }
}

async function checkNumberOfTodosInLocalStorage(page: Page, expected: number) {
  return await page.waitForFunction((e) => {
    return JSON.parse(localStorage['react-todos']).length === e
  }, expected)
}

async function checkNumberOfCompletedTodosInLocalStorage(
  page: Page,
  expected: number,
) {
  return await page.waitForFunction((e) => {
    return (
      JSON.parse(localStorage['react-todos']).filter(
        (todo: any) => todo.completed,
      ).length === e
    )
  }, expected)
}

async function checkTodosInLocalStorage(page: Page, title: string) {
  return await page.waitForFunction((t) => {
    return JSON.parse(localStorage['react-todos'])
      .map((todo: any) => todo.title)
      .includes(t)
  }, title)
}
</file>

<file path=".prettierignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env.local
.env.development.local
.env.test.local
.env.production.local

# vercel
.vercel
</file>

<file path=".prettierrc.json">
{
  "semi": false,
  "singleQuote": true,
  "plugins": ["prettier-plugin-tailwindcss"]
}
</file>

<file path="checkly.config.ts">
import { defineConfig } from 'checkly'

/**
 * See https://www.checklyhq.com/docs/cli/project-structure/
 */
const config = defineConfig({
  /* A human friendly name for your project */
  projectName: 'metvuw-mobile',
  /** A logical ID that needs to be unique across your Checkly account,
   * See https://www.checklyhq.com/docs/cli/constructs/ to learn more about logical IDs.
   */
  logicalId: 'metvuw-mobile',
  /* An optional URL to your Git repo */
  repoUrl: 'https://github.com/checkly/checkly-cli',
  /* Sets default values for Checks */
  checks: {
    /* A default for how often your Check should run in minutes */
    frequency: 10,
    /* Checkly data centers to run your Checks as monitors */
    locations: ['us-east-1', 'eu-west-1'],
    /* An optional array of tags to organize your Checks */
    tags: ['mac'],
    /** The Checkly Runtime identifier, determining npm packages and the Node.js version available at runtime.
     * See https://www.checklyhq.com/docs/cli/npm-packages/
     */
    runtimeId: '2023.09',
    /* A glob pattern that matches the Checks inside your repo, see https://www.checklyhq.com/docs/cli/using-check-test-match/ */
    checkMatch: '**/__checks__/**/*.check.ts',
    /* Global configuration option for Playwright-powered checks. See https://docs/browser-checks/playwright-test/#global-configuration */
    playwrightConfig: {
      use: {
        baseURL: 'http://localhost:3002',
      },
    },
    browserChecks: {
      /* A glob pattern matches any Playwright .spec.ts files and automagically creates a Browser Check. This way, you
       * can just write native Playwright code. See https://www.checklyhq.com/docs/cli/using-check-test-match/
       * */
      testMatch: '**/__checks__/**/*.spec.ts',
    },
  },
  cli: {
    /* The default datacenter location to use when running npx checkly test */
    runLocation: 'eu-west-1',
    /* An array of default reporters to use when a reporter is not specified with the "--reporter" flag */
    reporters: ['list'],
  },
})

export default config
</file>

<file path="GEMINI.md">
# Metvuw Mobile Project

This document provides an overview of the Metvuw Mobile project to help AI assistants understand its structure and purpose.

## Overview

This project is a mobile-friendly web application for viewing weather information, primarily from Metvuw. It is built with Next.js and TypeScript, and it scrapes, processes, and displays weather images.

**Important:** When working with this project, you should always refer to the `repomix-output.xml` file as it contains a summarized detail of the entire project. This file provides the most comprehensive context for any task.

## Key Technologies

*   **Framework:** Next.js
*   **Language:** TypeScript
*   **Styling:** Tailwind CSS
*   **Backend & APIs:** Next.js API Routes
*   **Background Jobs:** Inngest
*   **Database & Storage:** Supabase (Postgres and Storage)
*   **Testing:**
    *   E2E: Playwright
    *   Unit/Component: Jest and Vitest
    *   Monitoring: Checkly
*   **Deployment:** Vercel

## Project Structure

The project follows a structure typical for a Next.js application:

*   `src/app`: Contains the core application, including pages, API routes, and layouts.
    *   `api/scrape`: Endpoints for scraping weather data.
    *   `api/inngest`: Endpoint for managing Inngest background jobs.
    *   `regions/[name]`: Page for displaying regional weather forecasts.
    *   `radar/[code]`: Page for displaying weather radar.
    *   `satellite`: Page for displaying satellite imagery.
    *   `upperair`: Page for displaying upper air data.
*   `src/components`: Contains reusable React components used throughout the application.
*   `src/inngest`: Defines Inngest functions and cron jobs for periodic data scraping.
*   `src/shared`: Contains shared utilities, types, and helpers.
    *   `helpers/v2/screenScraper`: Logic for scraping images from the source website.
    *   `helpers/v2/imageStorage`: Functions for managing image uploads and removals from Supabase Storage.
*   `supabase`: Configuration and migration files for the Supabase database.
*   `e2e`: End-to-end tests written with Playwright.
*   `__checks__`: Checkly configuration for synthetic monitoring and API checks.

## Core Functionality

The application's primary function is to scrape weather images from an external source, process them, and display them in a user-friendly, mobile-first interface.

*   **Scraping:** The scraping logic is located in `src/shared/helpers/v2/screenScraper`.
*   **Background Jobs:** Inngest cron jobs in `src/inngest/cronFunctions` trigger the scraping process periodically to keep the data up-to-date.
*   **Image Processing:** Scraped images are compressed and optimized before being stored.
*   **Storage:** Processed images are stored in Supabase Storage.
*   **Data Display:** The frontend retrieves the images from Supabase Storage and displays them on the relevant pages.

The application handles several types of weather data:
*   Regional rain forecasts
*   Radar imagery
*   Satellite imagery
*   Upper air soundings

## Development and Testing

*   **Running Tests:**
    *   Unit/Component Tests: `npm test`
    *   E2E Tests: `npx playwright test` (requires a running instance of the application, with the base URL set via the `PLAYWRIGHT_TEST_BASE_URL` environment variable).
*   **Building the Project:**
    *   `npm run build`
</file>

<file path="importJestDOM.ts">
// import '@testing-library/jest-dom'
require('@testing-library/jest-dom')
</file>

<file path="instrumentation.ts">
export async function register() {
  if (process.env.NEXT_RUNTIME === 'nodejs') {
    const { BaselimeSDK, VercelPlugin, BetterHttpInstrumentation } =
      await import('@baselime/node-opentelemetry')

    const sdk = new BaselimeSDK({
      serverless: true,
      service: 'stratagize',
      instrumentations: [
        new BetterHttpInstrumentation({
          plugins: [
            // Add the Vercel plugin to enable correlation between your logs and traces for projects deployed on Vercel
            new VercelPlugin(),
          ],
        }),
      ],
    })

    sdk.start()
  }
}
</file>

<file path="jest.setup.js">
process.env.NEXT_PUBLIC_SUPABASE_URL = 'http://127.0.0.1:54321'
process.env.SUPABASE_SERVICE_ROLE_KEY = 'value'
process.env.SUPABASE_BUCKET_NAME = 'dev'
</file>

<file path="next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
</file>

<file path="playwright.config.ts">
import { defineConfig, devices } from '@playwright/test'

/**
 * Read environment variables from file.
 * https://github.com/motdotla/dotenv
 */
// require('dotenv').config();

/**
 * See https://playwright.dev/docs/test-configuration.
 */
export default defineConfig({
  testDir: './e2e',
  /* Run tests in files in parallel */
  fullyParallel: true,
  /* Fail the build on CI if you accidentally left test.only in the source code. */
  forbidOnly: !!process.env.CI,
  /* Retry on CI only */
  retries: process.env.CI ? 2 : 0,
  /* Opt out of parallel tests on CI. */
  workers: process.env.CI ? 1 : undefined,
  /* Reporter to use. See https://playwright.dev/docs/test-reporters */
  reporter: 'html',
  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
  use: {
    /* Base URL to use in actions like `await page.goto('/')`. */
    baseURL: process.env.PLAYWRIGHT_TEST_BASE_URL || 'http://localhost:3002',

    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
    trace: 'on-first-retry',
  },

  /* Configure projects for major browsers */
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },

    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },

    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },

    /* Test against mobile viewports. */
    // {
    //   name: 'Mobile Chrome',
    //   use: { ...devices['Pixel 5'] },
    // },
    // {
    //   name: 'Mobile Safari',
    //   use: { ...devices['iPhone 12'] },
    // },

    /* Test against branded browsers. */
    // {
    //   name: 'Microsoft Edge',
    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },
    // },
    // {
    //   name: 'Google Chrome',
    //   use: { ...devices['Desktop Chrome'], channel: 'chrome' },
    // },
  ],

  /* Run your local dev server before starting the tests */
  // webServer: {
  //   command: 'npm run start',
  //   url: 'http://127.0.0.1:3000',
  //   reuseExistingServer: !process.env.CI,
  // },
})
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};
</file>

<file path="README.md">
[![codecov](https://codecov.io/gh/sjclark76/metvuw-mobile/branch/main/graph/badge.svg?token=KN4LGY2GFW)](https://codecov.io/gh/sjclark76/metvuw-mobile)
![example workflow](https://github.com/sjclark76/metvuw-mobile/actions/workflows/build-and-test.yml/badge.svg)
[![E2E Tests](https://github.com/sjclark76/metvuw-mobile/actions/workflows/playwright.yml/badge.svg)](https://github.com/sjclark76/metvuw-mobile/actions/workflows/playwright.yml)
[![Renovate enabled](https://img.shields.io/badge/renovate-enabled-brightgreen.svg)](https://renovatebot.com/)
This is a [Next.js](https://nextjs.org/) weather forecast web site. View it [here](https://www.metvuwmobile.com)

npx playwright test
Runs the end-to-end tests.

npx playwright test --ui
Starts the interactive UI mode.

npx playwright test --project=chromium
Runs the tests only on Desktop Chrome.

npx playwright test example
Runs the tests in a specific file.

npx playwright test --debug
Runs the tests in debug mode.

npx playwright codegen
Auto generate tests with Codegen.

We suggest that you begin by typing:

    npx playwright test


# supabase

## Migrations

### Create New Migration
``` bash
supabase migration new MIGRATION_NAME
```

### Deploy Migration

```
supabase db push
```

### Create Auto Migration

supabase db diff -f MIGRATION_NAME



# Checkly

deploy latest tests
`npx checkly deploy`


# Inngest

run dev server
`npx inngest-cli@latest dev`

# Docker
colima start
</file>

<file path="renovate.json">
{
  "extends": ["config:recommended"],
  "packageRules": [
    {
      "matchUpdateTypes": ["minor", "patch"],
      "automerge": true
    }
  ]
}
</file>

<file path="server.js">
const { createServer } = require('http')
const { join } = require('path')
const { parse } = require('url')
const next = require('next')

const dev = process.env.NODE_ENV !== 'production'
const app = next({ dev })
const handle = app.getRequestHandler()

app.prepare().then(() => {
  createServer((req, res) => {
    const parsedUrl = parse(req.url, true)
    const { pathname } = parsedUrl

    // handle GET request to /service-worker.js
    if (pathname === '/service-worker.js') {
      const filePath = join(__dirname, '.next', pathname)

      app.serveStatic(req, res, filePath)
    } else {
      handle(req, res, parsedUrl)
    }
  }).listen(3000, () => {
    console.log(`> Ready on http://localhost:${3001}`)
  })
})
</file>

<file path="tailwind.config.js">
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,jsx,tsx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  darkmode: 'media', // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {
    display: ['responsive', 'group-hover', 'group-focus'],
    extend: {},
  },
  plugins: [],
}
</file>

<file path=".github/workflows/build-and-test.yml">
# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build & Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
  S3_REGION : ${{ secrets.S3_REGION }}
  SECRET_KEY : ${{ secrets.SECRET_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{secrets.SUPABASE_SERVICE_ROLE_KEY}}
  NEXT_PUBLIC_SUPABASE_URL : ${{secrets.NEXT_PUBLIC_SUPABASE_URL}}
jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - run: npm install
      - run: echo "Print all environment variables"
      - run: env
      - run: npm run build --if-present
      - run: npm run test
      #- name: Upload coverage to Codecov
      #  uses: codecov/codecov-action@v2
</file>

<file path="e2e/home_page.spec.ts">
import AxeBuilder from '@axe-core/playwright'
import { expect, test } from '@playwright/test'

test.describe('homepage', () => {
  test('should render page correctly', async ({ page }) => {
    await page.goto('/')

    // Expect a title "to contain" a substring.
    await expect(page).toHaveTitle(/metvuw mobile | nz/)

    await expect(
      page.getByRole('heading', {
        name: /forecast issued at .* for new zealand/i,
      }),
    ).toBeVisible()

    const firstCard = page.getByRole('listitem').first()

    await expect(
      firstCard.getByRole('img', {
        name: /new zealand forecast chart for .*/i,
      }),
    ).toBeVisible()

    // const accessibilityScanResults = await new AxeBuilder({ page }).analyze()
    //
    // expect(accessibilityScanResults.violations).toEqual([])
  })
})
</file>

<file path="e2e/radar_page.spec.ts">
import AxeBuilder from '@axe-core/playwright'
import { expect, test } from '@playwright/test'

test.describe('radar page', () => {
  test('should render page correctly', async ({ page }) => {
    await page.goto('/radar/nl') // 3

    await expect(page).toHaveTitle(/metvuw mobile | radar/)

    await expect(
      page.getByRole('heading', {
        name: /radar chart for northland/i,
      }),
    ).toBeVisible()

    const firstCard = page.getByRole('listitem').first()

    await expect(
      firstCard.getByRole('img', {
        name: /radar chart for/i,
      }),
    ).toBeVisible()

    // const accessibilityScanResults = await new AxeBuilder({ page }).analyze()
    //
    // expect(accessibilityScanResults.violations).toEqual([])
  })
})
</file>

<file path="e2e/satellite_page.spec.ts">
import AxeBuilder from '@axe-core/playwright'
import { expect, test } from '@playwright/test'

test.describe('satellite page', () => {
  test('should render page correctly', async ({ page }) => {
    await page.goto('/satellite')

    // Expect a title "to contain" a substring.
    await expect(page).toHaveTitle(/metvuw mobile | satellite/)

    await expect(
      page.getByRole('heading', {
        name: /satellite imagery for new zealand/i,
      }),
    ).toBeVisible()

    const firstCard = page.getByRole('listitem').first()

    await expect(
      firstCard.getByRole('img', {
        name: /satellite chart for/i,
      }),
    ).toBeVisible()

    // const accessibilityScanResults = await new AxeBuilder({ page }).analyze()
    //
    // expect(accessibilityScanResults.violations).toEqual([])
  })
})
</file>

<file path="e2e/upper_air_page.spec.ts">
import AxeBuilder from '@axe-core/playwright'
import { expect, test } from '@playwright/test'

test.describe('upper air page', () => {
  test('should render page correctly', async ({ page }) => {
    await page.goto('/upperair/93112') // 3

    await expect(page).toHaveTitle(/metvuw mobile | upper air/)

    await expect(
      page.getByRole('heading', {
        name: /upper air chart for whenuapai/i,
      }),
    ).toBeVisible()

    const firstCard = page.getByRole('listitem').first()

    await expect(
      firstCard.getByRole('img', {
        name: /upper air chart for/i,
      }),
    ).toBeVisible()

    // const accessibilityScanResults = await new AxeBuilder({ page }).analyze()
    //
    // expect(accessibilityScanResults.violations).toEqual([])
  })
})
</file>

<file path="public/manifest.json">
{
  "name": "Metvuw Mobile",
  "theme_color": "#9c87f8",
  "background_color": "#496dee",
  "display": "standalone",
  "orientation": "portrait",
  "scope": "/",
  "start_url": "/",
  "short_name": "MetvuwMobile",
  "screenshots" : [
    {
      "src": "Screen Shot.png",
      "sizes": "2168X2046",
      "type": "image/png"
    }
  ],
  "shortcuts": [
    {
      "name": "New Zealand",
      "url": "/regions/nz",
      "description": "New Zealand Forecast Charts"
    },
    {
      "name": "North Island New Zealand",
      "url": "/regions/nzni",
      "description": "New Zealand North Island Forecast Charts"
    },
    {
      "name": "South Island New Zealand",
      "url": "/regions/nzsi",
      "description": "New Zealand South Island Forecast Charts"
    }
  ],
  "categories": ["meteorology", "forecast", "weather", "metvuw"],
  "icons": [
    {
      "src": "/icon-512x512.png",
      "type": "image/png",
      "sizes": "512x512"
    },
    {
      "src": "/favicon-16x16.png",
      "type": "image/png",
      "sizes": "16x16"
    },
    {
      "src": "/favicon-96x96.png",
      "type": "image/png",
      "sizes": "96x96"
    },
    {
      "src": "/favicon-32x32.png",
      "type": "image/png",
      "sizes": "32x32"
    },
    {
      "src": "/apple-icon-180x180.png",
      "type": "image/png",
      "sizes": "180x180"
    },
    {
      "src": "/apple-icon-152x152.png",
      "type": "image/png",
      "sizes": "152x152"
    },
    {
      "src": "/apple-icon-144x144.png",
      "type": "image/png",
      "sizes": "144x144"
    },
    {
      "src": "/apple-icon-120x120.png",
      "type": "image/png",
      "sizes": "120x120"
    },
    {
      "src": "/apple-icon-114x114.png",
      "type": "image/png",
      "sizes": "114x114"
    },
    {
      "src": "/apple-icon-76x76.png",
      "type": "image/png",
      "sizes": "76x76"
    },
    {
      "src": "/apple-icon-72x72.png",
      "type": "image/png",
      "sizes": "72x72"
    },
    {
      "src": "/apple-icon-60x60.png",
      "type": "image/png",
      "sizes": "60x60"
    },
    {
      "src": "/apple-icon-57x57.png",
      "type": "image/png",
      "sizes": "57x57"
    }
  ]
}
</file>

<file path="scripts/scrape-all.sh">
#!/bin/bash

# Base URL for the API
BASE_URL="http://localhost:3002/api/scrape"

# List of all region codes
REGIONS=(
  "nz" "nzni" "nzsi" "victoria" "nsw" "waussie" "swaussie" 
  "queensland" "saussie" "seaussie" "newcaledonia" "swp" 
  "europe" "uk" "estonia" "turkey" "world" "usa" "japan" 
  "safrica" "ocean" "pacific" "fiji" "spacific" "pitcairn" 
  "natlantic" "satlantic"
)

# --- Helper Function ---
function call_endpoint() {
  local method=$1
  local url=$2
  echo "--------------------------------------"
  echo "Calling $method $url"
  curl -X "$method" "$url" -H "Content-Type: application/json"
  echo ""
  echo "--------------------------------------"
}

# --- Main Script ---

echo ">>> Scraping non-region-specific data..."
call_endpoint "POST" "$BASE_URL/radar"
call_endpoint "POST" "$BASE_URL/satellite"
call_endpoint "POST" "$BASE_URL/upper-air"

echo ""
echo ">>> Scraping region-specific data..."

for region in "${REGIONS[@]}"; do
  echo ""
  echo "--- Processing region: $region ---"
  
  # Full scrape (download and remove)
  call_endpoint "POST" "$BASE_URL/regions/$region"
  
  # Remove only
  call_endpoint "POST" "$BASE_URL/regions/remove/$region"
  
  # Upload only
  call_endpoint "POST" "$BASE_URL/regions/upload/$region"
done

echo ""
echo "All scrape endpoints have been called."
</file>

<file path="src/app/offline/page.tsx">
import Link from 'next/link'
import React from 'react'

export default function OfflinePage() {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center bg-gray-50 px-4 py-2 text-center sm:px-6 lg:px-8 dark:bg-gray-900">
      <div className="mx-auto max-w-md">
        {/* Modern "No Internet" Icon */}
        <svg
          className="mx-auto h-24 w-24 text-gray-400 dark:text-gray-600"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          aria-hidden="true"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={1.5}
            d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636M12 18.364V22M12 2V5.636M18.364 12H22M2 12h3.636"
          />
        </svg>
        <h1 className="mt-4 text-3xl font-extrabold tracking-tight text-gray-900 sm:text-4xl dark:text-white">
          You&apos;re Offline
        </h1>
        <p className="mt-2 text-lg text-gray-600 dark:text-gray-400">
          It looks like you&apos;re not connected to the internet. Please check
          your connection and try again.
        </p>
        <div className="mt-6">
          <Link
            href="/"
            className="inline-flex items-center rounded-md border border-transparent bg-blue-600 px-8 py-4 text-lg font-medium text-white shadow-sm transition-colors hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none dark:focus:ring-offset-gray-900"
          >
            Go to Home Page
          </Link>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/regions/[name]/loading.tsx">
import SubHeader from '@/components/SubHeader'

export default function Loading() {
  return (
    <>
      <SubHeader submenuText="Loading forecast data" />
      <ul className="flex flex-col items-center">
        {/*<WeatherChartSkeleton*/}
        {/*  width={rainImageDimensions.width}*/}
        {/*  height={rainImageDimensions.height}*/}
        {/*/>*/}
        {/*<WeatherChartSkeleton*/}
        {/*  width={rainImageDimensions.width}*/}
        {/*  height={rainImageDimensions.height}*/}
        {/*/>*/}
        {/*<WeatherChartSkeleton*/}
        {/*  width={rainImageDimensions.width}*/}
        {/*  height={rainImageDimensions.height}*/}
        {/*/>*/}
      </ul>
    </>
  )
}
</file>

<file path="src/app/regions/[name]/state.ts">
import { atom } from 'jotai/index'

export const loadedImageStateAtom = atom<Map<string, boolean>>(new Map())
</file>

<file path="src/components/Atoms/GlobalState.ts">
import { atom } from 'jotai'

const isMenuOpenAtom = atom(false)

const playAnimationAtom = atom(false)

const displayAnimatedChartAtom = atom(false)

const animatedChartIndexAtom = atom(0)

export {
  animatedChartIndexAtom,
  displayAnimatedChartAtom,
  isMenuOpenAtom,
  playAnimationAtom,
}
</file>

<file path="src/components/Footer/Footer.tsx">
import React from 'react'

export const Footer = () => (
  // Remove "fixed bottom-0 left-0 z-10 w-full" to allow the flexbox layout to control the footer's position.
  <footer className="bg-gray-50 px-0.5 py-1.5 shadow-inner filter dark:bg-stone-700">
    <h2 className="text-center text-sm font-medium text-gray-800 dark:text-stone-100">
      &copy; metvuw.com
    </h2>
  </footer>
)
</file>

<file path="src/components/Hooks/useIsStandalone.ts">
'use client'
import { useEffect, useState } from 'react'

export const useIsStandalone = () => {
  const [isStandalone, setIsStandalone] = useState(false)

  useEffect(() => {
    // This check only runs on the client where `window` is available.
    if (typeof window !== 'undefined' && window.matchMedia) {
      const mediaQuery = window.matchMedia('(display-mode: standalone)')
      setIsStandalone(mediaQuery.matches)

      // Listen for changes in display mode
      const handleChange = (e: MediaQueryListEvent) => {
        setIsStandalone(e.matches)
      }

      mediaQuery.addEventListener('change', handleChange)

      // Cleanup the event listener
      return () => {
        mediaQuery.removeEventListener('change', handleChange)
      }
    }
  }, [])

  return isStandalone
}
</file>

<file path="src/components/Hooks/usePreloadedImages.ts">
'use client'
import { useEffect } from 'react'

import { preloadImage } from '@/shared/helpers/images'
import { SkinnyChartData } from '@/shared/helpers/v2/chartData/constructChartData'

function usePreloadedImages(imageData: SkinnyChartData[]) {
  useEffect(() => {
    if (imageData && imageData.length > 0) {
      imageData.forEach((chart) => {
        if (chart.url) {
          preloadImage(chart.url)
        }
      })
    }
  }, [imageData])
}

export { usePreloadedImages }
</file>

<file path="src/components/Navbar/components/DropDown.tsx">
import { useEffect, useRef, useState } from 'react'

import { MenuLink } from '@/components/Navbar/types'

interface DropDownProps {
  heading: string
  links: MenuLink[]
}
const DropDown = (props: DropDownProps) => {
  const [isOpen, setIsOpen] = useState(false)
  const [currentItem, setCurrentItem] = useState<number | undefined>(undefined)
  const menuRef = useRef<HTMLUListElement>(null)
  useEffect(() => {
    window.addEventListener('keydown', handleKeyDown)
    return () => {
      window.removeEventListener('keydown', handleKeyDown)
    }
  })

  useEffect(() => {
    function handleClickOutside(event) {
      if (menuRef.current && !menuRef.current.contains(event.target)) {
        setIsOpen(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)

    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [menuRef])

  const handleKeyDown = (e: KeyboardEvent) => {
    if (isOpen) {
      e.preventDefault()

      switch (e.keyCode) {
        // KeyDown
        case 40:
          if (currentItem === props.links.length - 1) {
            setCurrentItem(0)
          } else {
            const newValue = currentItem === undefined ? 0 : currentItem + 1
            setCurrentItem(newValue)
          }
          break
        // KeyUp
        case 38:
          if (currentItem === 0) {
            setCurrentItem(props.links.length - 1)
          } else {
            setCurrentItem(
              currentItem ? currentItem - 1 : props.links.length - 1,
            )
          }
          break
        // Escape
        case 27:
          setCurrentItem(1)
          setIsOpen(false)
          break
        default:
          break
      }
    }
  }
  const headerText =
    'inline-flex items-center justify-center h-10 gap-2 px-5 font-bold tracking-wide text-white transition duration-300 rounded focus-visible:outline-none whitespace-nowrap hover:bg-slate-500 focus:bg-slate-600'

  return (
    <div className="relative inline-flex" id="dropdown">
      <button
        className={headerText}
        onClick={() => setIsOpen((prevState) => !prevState)}
        aria-expanded={isOpen}
      >
        <span>{props.heading}</span>
        <span className="relative only:-mx-5">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            strokeWidth="1.5"
            aria-labelledby="t-01 d-01"
            role="graphics-symbol"
          >
            <title id="t-01">Button icon</title>
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M19.5 8.25l-7.5 7.5-7.5-7.5"
            />
          </svg>
        </span>
      </button>
      <ul
        ref={menuRef}
        className={`${
          isOpen ? 'flex' : 'hidden'
        } absolute top-full z-30 mt-3 flex w-72 list-none flex-col rounded bg-white py-2 shadow-md shadow-slate-500/10`}
      >
        {props.links.map((item, index) => {
          return (
            <li
              key={index}
              className={` ${
                index === currentItem
                  ? 'bg-emerald-50 text-blue-500'
                  : 'bg-none text-slate-500'
              } flex items-start justify-between gap-2 p-2 px-5 transition-colors duration-300 hover:bg-blue-50 hover:text-blue-500 focus:bg-blue-50 focus:text-blue-600 focus:outline-hidden focus-visible:outline-hidden`}
            >
              <a
                href={item.href}
                aria-current={index + 1 === currentItem ? 'page' : 'false'}
              >
                <span className="flex flex-col gap-1 overflow-hidden whitespace-nowrap">
                  <span className="truncate leading-5">{item.value}</span>
                </span>
              </a>
            </li>
          )
        })}
      </ul>
    </div>
  )
}

export default DropDown
</file>

<file path="src/components/Navbar/NavBar.tsx">
'use client'
import { useAtom } from 'jotai'
import Link from 'next/link'
import { useEffect, useRef } from 'react' // Import useEffect and useRef

import { isMenuOpenAtom } from '@/components/Atoms/GlobalState'
import { HamburgerSvg } from '@/components/Navbar/components/HamburgerSvg'
import { MetvuwMobileImage } from '@/components/Navbar/components/MetvuwMobileImage'
import { balloonLocations } from '@/shared/types/balloonLocations'
import { radarRegions } from '@/shared/types/radarRegions'
import {
  australiaRegions,
  europeRegions,
  nzRegions,
  oceans,
  pacificRegions,
  Region,
  worldRegions,
} from '@/shared/types/region'

import DropDown from './components/DropDown'
import { MenuLink } from './types'

export const mapRegionToMenuLink = (regions: Region[]): MenuLink[] =>
  regions.map((region) => ({
    key: region.code,
    value: region.name,
    href: `/regions/${region.code}`,
  }))

const nzLinks = mapRegionToMenuLink(nzRegions)
const australiaLinks = mapRegionToMenuLink(australiaRegions)
const pacificLinks = mapRegionToMenuLink(pacificRegions)
const europeLinks = mapRegionToMenuLink(europeRegions)
const worldLinks = mapRegionToMenuLink(worldRegions)
const oceanLinks = mapRegionToMenuLink(oceans)
const radarLinks: MenuLink[] = Object.keys(radarRegions).map((key) => ({
  href: `/radar/${key}`,
  key,
  value: radarRegions[key],
}))
const balloonLinks: MenuLink[] = Object.keys(balloonLocations).map((key) => ({
  href: `/upperair/${key}`,
  key,
  value: balloonLocations[key],
}))

const Navbar = () => {
  const [menuOpen, setMenuOpen] = useAtom(isMenuOpenAtom)
  const navRef = useRef<HTMLElement>(null) // Create a ref for the nav element

  const handleClick = () => {
    setMenuOpen((prev) => !prev)
  }

  // Effect to handle clicks outside the navbar
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        menuOpen &&
        navRef.current &&
        !navRef.current.contains(event.target as Node)
      ) {
        setMenuOpen(false)
      }
    }

    // Add event listener when the menu is open
    if (menuOpen) {
      document.addEventListener('mousedown', handleClickOutside)
    }

    // Cleanup function to remove event listener
    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [menuOpen, setMenuOpen]) // Re-run effect if menuOpen or setMenuOpen changes

  const headerText =
    'inline-flex items-center justify-center h-10 gap-2 px-5 font-bold tracking-wide text-white transition duration-300 rounded focus-visible:outline-none whitespace-nowrap hover:bg-slate-600 focus:bg-slate-700'

  return (
    <nav
      ref={navRef} // Attach the ref to the nav element
      className="flex flex-wrap items-center bg-linear-to-b from-slate-400 to-slate-500 p-2"
    >
      <Link href="/" className="mr-4 inline-flex items-center p-2">
        <MetvuwMobileImage />
        <span className="pl-2 text-lg font-bold tracking-wide text-white uppercase md:text-xl">
          Metvuw Mobile
        </span>
      </Link>
      <button
        aria-label="Open Menu"
        className="ml-auto inline-flex rounded-xs p-3 text-white outline-hidden hover:bg-slate-500 hover:text-white 2xl:hidden"
        onClick={handleClick}
      >
        <HamburgerSvg />
      </button>
      <div
        className={`${
          menuOpen ? '' : 'hidden'
        } w-full 2xl:inline-flex 2xl:w-auto 2xl:grow`}
      >
        <div className="flex w-full flex-col items-start 2xl:ml-auto 2xl:inline-flex 2xl:h-auto 2xl:w-auto 2xl:flex-row 2xl:items-center">
          <DropDown heading="New Zealand" links={nzLinks} />
          <DropDown heading="Australia" links={australiaLinks} />
          <DropDown heading="Pacific" links={pacificLinks} />
          <DropDown heading="Europe" links={europeLinks} />
          <DropDown heading="Rest Of World" links={worldLinks} />
          <DropDown heading="Oceans" links={oceanLinks} />
          <div className={headerText}>
            <Link
              href="/satellite"
              className="mr-1"
              onClick={() => setMenuOpen(false)}
            >
              Satellite
            </Link>
          </div>
          <DropDown heading="Radar" links={radarLinks} />
          <DropDown heading="Upper Air" links={balloonLinks} />
          <div className={headerText}>
            <a className="mr-1" href="mailto:metvuwmobile@gmail.com">
              Contact
            </a>
          </div>
        </div>
      </div>
    </nav>
  )
}

export default Navbar
</file>

<file path="src/components/RadarPage/RadarPage.tsx">
import SubHeader from '@/components/SubHeader'
import { SkinnyChartData } from '@/shared/helpers/v2/chartData/constructChartData'
import { radarRegions } from '@/shared/types/radarRegions'

import RadarAndSatelliteImages from '../RadarAndSatelliteImages/RadarAndSatelliteImages'

export function RadarPage({
  radarData,
  radarCode,
}: {
  radarData: SkinnyChartData[]
  radarCode: string
}) {
  return (
    <>
      <SubHeader submenuText={`Radar Chart for ${radarRegions[radarCode]}`} />
      <RadarAndSatelliteImages images={radarData} chartType="Radar" />
    </>
  )
}
</file>

<file path="src/components/SatellitePage/SatellitePage.tsx">
'use client'
import React from 'react'

import { FooterControl } from '@/components/FooterControl'
import { usePreloadedImages } from '@/components/Hooks/usePreloadedImages'
import SubHeader from '@/components/SubHeader'
import { SkinnyChartData } from '@/shared/helpers/v2/chartData/constructChartData'

import RadarAndSatelliteImages from '../RadarAndSatelliteImages/RadarAndSatelliteImages'

export function SatellitePage({
  satelliteData,
}: {
  satelliteData: SkinnyChartData[]
}) {
  usePreloadedImages(satelliteData)

  return (
    // This outer div will manage the layout for content and the sticky footer.
    // It takes at least the height of the viewport minus the main navbar's height (approx. 4rem or h-16).
    <div className="flex min-h-[calc(100vh-4rem)] flex-col">
      {/* This div will contain your main page content and grow to fill available space */}
      <div className="flex-grow">
        <SubHeader submenuText="Satellite Imagery for New Zealand" />
        <RadarAndSatelliteImages images={satelliteData} chartType="Satellite" />
      </div>
      <FooterControl charts={satelliteData} />
    </div>
  )
}
</file>

<file path="src/components/SubHeader/SubHeader.tsx">
'use client'
import clsx from 'clsx'
import { useAtomValue } from 'jotai'

import { loadedImageStateAtom } from '@/app/regions/[name]/state'
import { isMenuOpenAtom } from '@/components/Atoms/GlobalState'

export function SubHeader({ submenuText }: { submenuText: string }) {
  const menuOpen = useAtomValue(isMenuOpenAtom)
  const loadedImageState = useAtomValue(loadedImageStateAtom)

  const loadedCount = Array.from(loadedImageState.values()).filter(
    Boolean,
  ).length
  const totalCount = loadedImageState.size
  const progress = totalCount > 0 ? (loadedCount / totalCount) * 100 : 0

  const styling = clsx(
    'sticky z-10',
    menuOpen && 'top-[29rem]',
    !menuOpen && 'top-16',
  )
  return (
    <div className={styling}>
      <div className="w-full bg-gray-200 dark:bg-gray-700">
        <div
          className="h-1 bg-sky-400 transition-all duration-500 ease-out"
          style={{ width: `${progress}%` }}
        />
      </div>
      <div className="flex flex-row justify-center">
        <div className="w-full bg-gray-50 px-2 filter dark:bg-stone-700">
          <h1 className="my-4 text-center text-sm font-medium text-gray-800 dark:text-stone-100">
            {submenuText}
          </h1>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/UpperAirPage/UpperAirPage.tsx">
import SubHeader from '@/components/SubHeader'
import { SkinnyChartData } from '@/shared/helpers/v2/chartData/constructChartData'
import { balloonLocations } from '@/shared/types/balloonLocations'

import RadarAndSatelliteImages from '../RadarAndSatelliteImages/RadarAndSatelliteImages'

export function UpperAirPage({
  chartData,
  balloonCode,
}: {
  chartData: SkinnyChartData[]
  balloonCode: string
}) {
  return (
    <>
      <SubHeader
        submenuText={`Upper Air Chart for ${balloonLocations[balloonCode]}`}
      />
      <RadarAndSatelliteImages images={chartData} chartType="Upper Air" />
    </>
  )
}
</file>

<file path="src/components/WeatherCharts/WeatherChartsWithAnimation.test.tsx">
// import { render, screen } from '@testing-library/react'
//
// import { getByRegionCode } from '@/shared/types/region'
//
// import { nzRegionCharts } from '../../../testing/nz'
// import WeatherCharts from './WeatherCharts'
// describe.skip('<WeatherCharts/>', () => {
//   test('should render with our image for the correct day', () => {
//     render(
//       <WeatherCharts region={getByRegionCode('nz')} charts={nzRegionCharts} />,
//     )
//
//     expect(
//       screen.getByRole('img', {
//         name: /new zealand forecast chart for tuesday, may 17th, 2022 at 12:00 pm/i,
//       }),
//     ).toBeInTheDocument()
//   })
// })

test('foo', () => {
  expect(true).toBeTruthy()
})
</file>

<file path="src/components/Card.tsx">
import clsx from 'clsx'
import { ReactNode } from 'react'

export default function Card({
  weatherImage,
  date,
  time,
  isLoading = false,
}: {
  weatherImage: ReactNode
  date: ReactNode
  time: ReactNode
  isLoading?: boolean
}) {
  const styling = clsx(
    'mb-5 rounded-xl bg-white pb-3 dark:bg-stone-700 drop-shadow-2xl ',
    // 'sm:w-4/5 xl:w-5/12 2xl:w-1/2 ',
    isLoading && 'animate-pulse',
  )
  return (
    <div className={styling}>
      {weatherImage}
      <div className="flex items-center justify-around rounded-b-lg pt-3">
        {date}
        {time}
      </div>
    </div>
  )
}
</file>

<file path="src/components/NoForecast.tsx">
export default function NoForecast() {
  return (
    <div className="flex items-center justify-center">
      No forecast to display
    </div>
  )
}
</file>

<file path="src/shared/helpers/v2/chartData/constructChartData.test.ts">
import { vi } from 'vitest'

import { constructChartData } from '@/shared/helpers/v2/chartData/constructChartData'

vi.mock('@/shared/db/supabase', () => {
  return {
    supabase: {
      storage: {
        from: () => ({
          getPublicUrl: (path: string) => ({
            data: {
              publicUrl: `http://127.0.0.1:54321/storage/v1/object/public/dev/${path}`,
            },
          }),
        }),
      },
    },
  }
})

describe('constructChartData', () => {
  test('should construct correctly for satellite', () => {
    const chartData = constructChartData([
      {
        imageFileName: '202403291200.jpg',
        fullStoragePath: 'images/satellite/202403291200.jpg',
      },
    ])

    expect(chartData).toMatchObject([
      {
        imageDateUTC: 1711713600000,
        url: 'http://127.0.0.1:54321/storage/v1/object/public/dev/images/satellite/202403291200.jpg',
      },
    ])
  })

  test('should construct correctly for radar', () => {
    const chartData = constructChartData([
      {
        imageFileName: '202403292100Z_ak.gif',
        fullStoragePath: 'images/radar/ak/202403292100Z_ak.gif',
      },
    ])

    expect(chartData).toMatchObject([
      {
        imageDateUTC: 1711746000000,
        url: 'http://127.0.0.1:54321/storage/v1/object/public/dev/images/radar/ak/202403292100Z_ak.gif',
      },
    ])
  })

  test('should construct correctly for upper-air', () => {
    const chartData = constructChartData([
      {
        imageFileName: '202403201200.93112.webp',
        fullStoragePath: 'images/upper-air/93112/202403201200.93112.webp',
      },
    ])

    expect(chartData).toMatchObject([
      {
        imageDateUTC: 1710936000000,
        url: 'http://127.0.0.1:54321/storage/v1/object/public/dev/images/upper-air/93112/202403201200.93112.webp',
      },
    ])

    expect(
      new Date(chartData[0].imageDateUTC).toISOString(),
    ).toMatchInlineSnapshot(`"2024-03-20T12:00:00.000Z"`)
  })

  test('upper air scenario 1 creates the correct date', () => {
    const storageImage = {
      imageFileName: '202403201200.93112.webp',
      fullStoragePath: 'upper-air/93112/202403201200.93112.webp',
    }
    const result = constructChartData([storageImage])

    expect(result).toHaveLength(1)
    expect(new Date(result[0].imageDateUTC).toISOString()).toBe(
      '2024-03-20T12:00:00.000Z',
    )
  })

  test('upper air scenario 1 creates the correct date', () => {
    const storageImage = {
      imageFileName: '202403210000.93112.webp',
      fullStoragePath: 'upper-air/93112/202403210000.93112.webp',
    }
    const result = constructChartData([storageImage])

    expect(result).toHaveLength(1)
    expect(new Date(result[0].imageDateUTC).toISOString()).toBe(
      '2024-03-21T00:00:00.000Z',
    )
  })
})
</file>

<file path="src/shared/helpers/v2/chartData/constructRainChartData.test.ts">
import { vi } from 'vitest'

import { constructRainChartData } from '@/shared/helpers/v2/chartData/constructRainChartData'

vi.mock('@/shared/db/supabase', () => {
  return {
    supabase: {
      storage: {
        from: () => ({
          getPublicUrl: (path: string) => ({
            data: {
              publicUrl: `http://127.0.0.1:54321/storage/v1/object/public/dev/${path}`,
            },
          }),
        }),
      },
    },
  }
})

describe('constructRainChartData', () => {
  test('should construct correctly for rain', () => {
    const chartData = constructRainChartData([
      {
        imageFileName: 'rain-nzsi-thumb-2024033018-006.webp',
        fullStoragePath:
          'images/region/nzsi/rain-nzsi-thumb-2024033018-006.webp',
      },
    ])

    expect(chartData).toMatchObject([
      {
        imageDateUTC: 1711821600000,
        url: 'http://127.0.0.1:54321/storage/v1/object/public/dev/images/region/nzsi/rain-nzsi-thumb-2024033018-006.webp',
      },
    ])
  })
})
</file>

<file path="src/shared/helpers/v2/imageStorage/retrieveImagesFromStorage.ts">
import { FileObject } from '@supabase/storage-js'

import { config } from '@/config'
import serviceRoleDb from '@/shared/db/serviceRoleDb'
import { defaultSearchOptions } from '@/shared/helpers/v2/imageStorage/defaults'
import { StorageImage } from '@/shared/types/storageImage'

/**
 * Checks if a given file object represents a directory.
 * @param {FileObject} file - The file object to check.
 * @returns {boolean} True if the file object represents a directory, false otherwise.
 */
function isDirectory(file: FileObject): boolean {
  return file.id === null
}

/**
 * Recursively retrieves all images from a given path in storage.
 * If a directory is encountered, the function is called recursively with the new path.
 * @param {string} path - The path to retrieve images from.
 * @returns {Promise<FileObject[]>} A promise that resolves to an array of FileObjects representing the images.
 */
export async function retrieveImagesFromStorage(
  path: string,
): Promise<StorageImage[]> {
  const bucket = await serviceRoleDb.storage.getBucket(
    config.supbabaseBucketName,
  )

  if (bucket.data === null) {
    await serviceRoleDb.storage.createBucket(config.supbabaseBucketName, {
      public: true,
    })
  }
  // Retrieve the list of files (or directories) from the given path
  const { data } = await serviceRoleDb.storage
    .from(config.supbabaseBucketName)
    .list(path, defaultSearchOptions)

  const files = data ?? []

  // For each file, if it's a directory, recursively retrieve the images from the new path.
  // If it's a file, add it to the result array.
  const result = await Promise.all(
    files.flatMap(async (file) => {
      if (isDirectory(file)) {
        const newPath = `${path}/${file.name}`
        return retrieveImagesFromStorage(newPath)
      } else {
        const storageImage: StorageImage = {
          fullStoragePath: `${path}/${file.name}`,
          imageFileName: file.name,
        }
        return [storageImage]
      }
    }),
  )

  // Flatten the result array and return it
  return result.flat()
}
</file>

<file path="src/shared/helpers/images.ts">
// src/shared/utils/preloadImage.ts
export function preloadImage(url: string): void {
  if (url) {
    const img = new Image()
    img.src = url
  }
}
</file>

<file path="src/config.ts">
export const config = {
  baseUrl: process.env.VERCEL_PROJECT_PRODUCTION_URL
    ? `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`
    : 'https://valid-factual-barnacle.ngrok-free.app',
  cloudFrontUrl: 'https://metvuw.com/',
  metvuwBaseUrl: 'https://metvuw.com/', //https://dpucyvo9dklo9.cloudfront.net',
  s3: {
    accessKey: process.env.ACCESS_KEY,
    bucketName: process.env.BUCKET_NAME ?? 'metvuw-mobile',
    region: process.env.S3_REGION,
    secret: process.env.SECRET_KEY,
  },
  supabaseServiceRoleKey:
    process.env.SUPABASE_SERVICE_ROLE_KEY ?? 'your-service-role-key',
  supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL ?? 'http://localhost:54321',
  supbabaseBucketName: process.env.SUPABASE_BUCKET_NAME ?? 'dev',
  inngestEventKey: process.env.INNGEST_EVENT_KEY ?? '',
  environment: process.env.VERCEL_ENV,
}
</file>

<file path="jest.config.mjs">
import nextJest from 'next/jest.js';

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
});

// Add any custom config to be passed to Jest
/** @type {import('jest').Config} */
const config = {
  // Add more setup options before each test is run
  // setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  transformIgnorePatterns: ["/node_modules/(?!(@supabase/.*|isows|superjson)/)"],
  setupFiles: ['./jest.setup.js'],
  testEnvironment: 'jest-environment-jsdom',
  passWithNoTests: true,
  moduleNameMapper: {
    /* Handle CSS imports (with CSS modules)
    https://jestjs.io/docs/webpack#mocking-css-modules */
    '^.+\.module\.(css|sass|scss)$': 'identity-obj-proxy',

    // Handle CSS imports (without CSS modules)
    '^.+\.(css|sass|scss)$': '<rootDir>/__mocks__/styleMock.js',

    // /* Handle image imports
    // https://jestjs.io/docs/webpack#handling-static-assets */
    // '^.+\.(jpg|jpeg|png|gif|webp|avif|svg)$':
    //     '<rootDir>/__mocks__/fileMock.js',
  },
  testMatch: [
    "**/?(*.)+(test).[jt]s?(x)",
  ],
  prettierPath:null
};

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
export default createJestConfig(config);
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es2018",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext",
      "webworker"
    ],
    "types": [
      // This allows Serwist to type `window.serwist`.
      "@serwist/next/typings"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "Bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "strictNullChecks": true,
    "paths": {
      "@/*": ["./src/*"],
      "@legacy-components/*": ["./components/*"],
      "@shared/*": ["./shared/*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "public/sw.js"
  ]
}
</file>

<file path="vercel.json">
{
  "crons": [
    {
      "path": "/api/cache/refresh",
      "schedule": "0 7 * * *"
    },
    {
      "path": "/api/cache/refresh",
      "schedule": "0 8 * * *"
    }
  ]
}
</file>

<file path="vitest.config.ts">
import react from '@vitejs/plugin-react'
import path from 'path'
import { defineConfig } from 'vitest/config'

export default defineConfig({
  plugins: [react()],
  test: {
    environment: 'jsdom',
    globals: true,
    setupFiles: './vitest.setup.ts',
    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
    exclude: ['node_modules', 'e2e', 'tests-examples'],
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
})
</file>

<file path="vitest.setup.ts">
import '@testing-library/jest-dom'

process.env.NEXT_PUBLIC_SUPABASE_URL = 'http://127.0.0.1:54321'
process.env.SUPABASE_SERVICE_ROLE_KEY = 'value'
process.env.SUPABASE_BUCKET_NAME = 'dev'
</file>

<file path="src/app/sw.ts">
/* eslint-disable no-unused-vars */
import { defaultCache } from '@serwist/next/worker'
import type { PrecacheEntry, SerwistGlobalConfig } from 'serwist'
import { Serwist } from 'serwist'

// This declares the value of `self.__SW_MANIFEST`.
// See https://serwist.pages.dev/docs/next/configuring
declare global {
  interface ServiceWorkerGlobalScope extends SerwistGlobalConfig {
    __SW_MANIFEST: (PrecacheEntry | string)[] | undefined
  }
}

declare const self: ServiceWorkerGlobalScope

// eslint-disable-next-line no-console
console.log('Service worker script loaded.')

const serwist = new Serwist({
  precacheEntries: [
    ...(self.__SW_MANIFEST || []),
    { url: '/offline', revision: null },
    // { url: '/', revision: null },
    // { url: '/regions/nz', revision: null },
  ],
  skipWaiting: true,
  clientsClaim: true,
  navigationPreload: false,
  runtimeCaching: defaultCache,
})

serwist.setCatchHandler(async ({ request }) => {
  // Fallback for document requests to the offline page.
  if (request.destination === 'document') {
    const offlinePage = await caches.match('/offline')
    if (offlinePage) {
      return offlinePage
    }
  }

  // For any other request, return a standard network error.
  return Response.error()
})

serwist.addEventListeners()
</file>

<file path="src/components/AnimatedWeatherChart/animated-weather-chart.tsx">
'use client'
import { useAtom, useAtomValue } from 'jotai'
import { useEffect } from 'react'

import {
  animatedChartIndexAtom,
  playAnimationAtom,
} from '@/components/Atoms/GlobalState'
import { WeatherChart } from '@/components/WeatherCharts/WeatherChart'
import { SkinnyRainChartData } from '@/shared/types/rainChartData'
import { Region } from '@/shared/types/region'

interface AnimatedWeatherChartProps {
  region: Region
  charts: SkinnyRainChartData[]
}
const AnimatedWeatherChart = ({
  region,
  charts,
}: AnimatedWeatherChartProps) => {
  const [currentIndex, setCurrentIndex] = useAtom(animatedChartIndexAtom)
  const playAnimation = useAtomValue(playAnimationAtom)

  useEffect(() => {
    let interval
    if (playAnimation) {
      interval = setInterval(() => {
        setCurrentIndex((prevIndex) => (prevIndex + 1) % charts.length)
      }, 250)
    }
    return () => clearInterval(interval)
  }, [playAnimation, charts.length, setCurrentIndex])

  return (
    <WeatherChart
      region={region}
      chart={charts[currentIndex]}
      index={currentIndex}
    />
  )
}
export { AnimatedWeatherChart }
</file>

<file path="src/components/RadarAndSatelliteImages/AnimatedRadarAndSatelliteImageCard.tsx">
import { useAtom, useAtomValue } from 'jotai/index'
import { useEffect } from 'react'

import {
  animatedChartIndexAtom,
  playAnimationAtom,
} from '@/components/Atoms/GlobalState'
import { RadarAndSatelliteImageCard } from '@/components/RadarAndSatelliteImages/RadarAndSatelliteImageCard'
import { SkinnyChartData } from '@/shared/helpers/v2/chartData/constructChartData'
import { ChartType } from '@/shared/types/ChartType'

type Props = {
  images: SkinnyChartData[]
  chartType: Extract<ChartType, 'Radar' | 'Satellite' | 'Upper Air'>
}

function AnimatedRadarAndSatelliteImageCard({ images, chartType }: Props) {
  const [currentIndex, setCurrentIndex] = useAtom(animatedChartIndexAtom)
  const playAnimation = useAtomValue(playAnimationAtom)

  useEffect(() => {
    let interval
    if (playAnimation) {
      interval = setInterval(() => {
        setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length)
      }, 1000)
    }
    return () => clearInterval(interval)
  }, [playAnimation, images.length, setCurrentIndex])

  return (
    <div>
      <RadarAndSatelliteImageCard
        image={images[currentIndex]}
        chartType={chartType}
        isHighPriority={true}
      />
    </div>
  )
}

export { AnimatedRadarAndSatelliteImageCard }
</file>

<file path="src/components/RadarAndSatelliteImages/RadarAndSatelliteImageCard.tsx">
/* eslint-disable no-console */

import { format } from 'date-fns'

import Card from '@/components/Card'
import WeatherImage from '@/components/WeatherImage'
import { SkinnyChartData } from '@/shared/helpers/v2/chartData/constructChartData'
import { ChartType } from '@/shared/types/ChartType'

type Props = {
  image: SkinnyChartData
  chartType: Extract<ChartType, 'Radar' | 'Satellite' | 'Upper Air'>
  isHighPriority: boolean
}

const safeFormat = (date: number, formatString: string) => {
  try {
    return format(date, formatString)
  } catch {
    console.error(
      `error formatting date date:${date} formatString:${formatString}`,
    )
  }
}

function RadarAndSatelliteImageCard({
  image,
  chartType,
  isHighPriority,
}: Props) {
  const createImgAlt = (image: SkinnyChartData) => {
    return `${chartType.toLowerCase()} chart for ${format(
      new Date(image.imageDateUTC),
      'PPPPp',
    )}`
  }

  return (
    <Card
      key={image.imageDateUTC}
      weatherImage={
        <WeatherImage
          imageSrc={image.url}
          imageAlt={createImgAlt(image)}
          chartType={chartType}
          isHighPriority={isHighPriority}
        />
      }
      date={
        <span className="text-base font-semibold text-gray-700 dark:text-stone-100">
          {safeFormat(image.imageDateUTC, 'PPPP')}
        </span>
      }
      time={
        <span className="w-20 transform rounded-xs bg-gray-900 px-2 py-1 text-center text-xs font-semibold text-white uppercase dark:bg-stone-200 dark:text-stone-700">
          {safeFormat(image.imageDateUTC, 'hh:mm a')}
        </span>
      }
    />
  )
}

export { RadarAndSatelliteImageCard }
</file>

<file path="src/components/RegionPage/region-page.tsx">
'use client'

import { format } from 'date-fns'
import { useSetAtom } from 'jotai'
import React from 'react'

import { loadedImageStateAtom } from '@/app/regions/[name]/state'
import { FooterControl } from '@/components/FooterControl'
import { usePreloadedImages } from '@/components/Hooks/usePreloadedImages'
import SubHeader from '@/components/SubHeader'
import WeatherChartsWithAnimation from '@/components/WeatherCharts/WeatherChartsWithAnimation'
import { SkinnyRainChartData } from '@/shared/types/rainChartData'
import { Region } from '@/shared/types/region'

interface RegionPageProps {
  region: Region
  rainChartData: SkinnyRainChartData[]
}

export default function RegionPage({ region, rainChartData }: RegionPageProps) {
  const setLoadedImageState = useSetAtom(loadedImageStateAtom)

  const submenuText =
    rainChartData.length > 0
      ? `Forecast issued at ${format(
          new Date(rainChartData[0].imageDateUTC),
          'PPPPp',
        )} for ${region.name}`
      : ''

  usePreloadedImages(rainChartData)

  setLoadedImageState(
    rainChartData.reduce(
      (acc: Map<string, boolean>, chart: SkinnyRainChartData) => {
        acc.set(chart.url, false)
        return acc
      },
      new Map<string, boolean>(),
    ),
  )

  return (
    // This outer div will manage the layout for content and the sticky footer.
    // It takes at least the height of the viewport minus the main navbar's height (approx. 4rem or h-16).
    <div className="flex min-h-[calc(100vh-4rem)] flex-col">
      {/* This div will contain your main page content and grow to fill available space */}
      <div className="flex flex-grow flex-col">
        <SubHeader submenuText={submenuText} />
        <WeatherChartsWithAnimation region={region} charts={rainChartData} />
      </div>
      <FooterControl charts={rainChartData} />
    </div>
  )
}
</file>

<file path="src/components/WeatherCharts/WeatherChart.tsx">
'use client'
import { format } from 'date-fns'

import Card from '@/components/Card'
import { SkinnyRainChartData } from '@/shared/types/rainChartData'
import { Region } from '@/shared/types/region'

import WeatherImage from '../WeatherImage/WeatherImage'

interface Props {
  chart: SkinnyRainChartData
  region: Region
  index: number
}

export function WeatherChart(props: Props) {
  const altTag = `${props.region.name} forecast chart for ${format(
    new Date(props.chart.forecastDate),
    'PPPPp',
  )}`
  const forecastDate = new Date(props.chart.forecastDate)

  return (
    <Card
      weatherImage={
        <WeatherImage
          imageSrc={props.chart.url}
          imageAlt={altTag}
          chartType="Rain"
          isHighPriority={props.index === 0}
        />
      }
      date={
        <span className="text-left text-sm font-semibold text-gray-700 sm:text-base dark:text-stone-100">
          {format(forecastDate, 'dd/MM/yyyy')}
        </span>
        // <div className="flex items-center justify-center gap-x-1 text-sm font-semibold text-gray-700 sm:text-base dark:text-stone-100">
        //
        //   <span className="text-left">{format(forecastDate, 'yyyy')}</span>
        // </div>
      }
      time={
        <div className="flex items-center justify-center gap-x-1 text-center text-xs font-semibold text-white">
          <span className="w-20 transform rounded-sm bg-sky-600 px-1 py-1">
            {format(forecastDate, 'EEEE')}
          </span>
          <span className="w-20 transform rounded-sm bg-gray-900 px-1 py-1 font-mono uppercase dark:bg-stone-200 dark:text-stone-700">
            {format(forecastDate, 'hh:mm a')}
          </span>
        </div>
      }
    />
  )
}
</file>

<file path="src/components/WeatherImage/WeatherImage.tsx">
import { useSetAtom } from 'jotai/index'
import { useEffect, useRef } from 'react'

import { loadedImageStateAtom } from '@/app/regions/[name]/state'
import {
  radarImageDimensions,
  rainImageDimensions,
  satelliteImageDimensions,
  upperAirImageDimensions,
} from '@/shared/helpers/v2/imageCompression/imageDimensions'
import { ChartType } from '@/shared/types/ChartType'

export interface WeatherImageProps {
  chartType: ChartType
  imageAlt: string
  imageSrc: string | undefined
  isHighPriority: boolean
}

function extraImageAttribute(
  chartType: ChartType,
  imageSrc: string | undefined,
) {
  const smallImageSrc = imageSrc?.replace('images', 'small-images')

  switch (chartType) {
    case 'Satellite':
      return {
        srcSet: `${smallImageSrc} 300w, ${imageSrc} 840w`,
        sizes: '(min-width: 900px) 840px, calc(93.1vw + 21px)',
        ...satelliteImageDimensions,
      }
    case 'Upper Air':
      return {
        srcSet: `${smallImageSrc} 300w, ${imageSrc} 760w`,
        sizes: '(min-width: 820px) 760px, calc(92vw + 24px)',
        ...upperAirImageDimensions,
      }
    case 'Radar':
      return {
        ...radarImageDimensions,
      }
    case 'Rain':
      return {
        ...rainImageDimensions,
      }
    default:
      return {}
  }
}

const WeatherImage = ({
  imageAlt,
  imageSrc,
  chartType,
  isHighPriority,
}: WeatherImageProps) => {
  const setLoadedImageState = useSetAtom(loadedImageStateAtom)
  const imgRef = useRef<HTMLImageElement>(null)

  useEffect(() => {
    const imageElement = imgRef.current

    const handleLoad = () => {
      if (imageElement?.src) {
        setLoadedImageState((prev) => new Map(prev).set(imageElement.src, true))
      }
    }

    if (imageElement) {
      if (imageElement.complete) {
        handleLoad()
      } else {
        imageElement.addEventListener('load', handleLoad)
      }
    }

    return () => {
      if (imageElement) {
        imageElement.removeEventListener('load', handleLoad)
      }
    }
  }, [imageSrc, setLoadedImageState])

  const attributes = extraImageAttribute(chartType, imageSrc)

  if (!imageSrc) {
    return (
      <div data-testid="weather-image-placeholder">Image not available</div>
    )
  }

  const commonProps = {
    src: imageSrc,
    ...attributes,
    style: {
      display: 'block',
      width: '100%',
      maxWidth: '100%',
      height: 'auto',
      ...(attributes &&
      typeof attributes === 'object' &&
      'style' in attributes &&
      typeof attributes.style === 'object'
        ? attributes.style
        : {}),
    },
  }

  return (
    <div data-testid="weather-image" className="w-full">
      <img
        ref={imgRef}
        alt={imageAlt}
        {...commonProps}
        fetchPriority={isHighPriority ? 'high' : 'low'}
      />
    </div>
  )
}
export default WeatherImage
</file>

<file path=".eslintrc.js">
module.exports = {
  env: {
    browser: true,
    jest: true,
  },
  extends: [
    'next/core-web-vitals',
    'prettier',
    'eslint:recommended',
    'plugin:prettier/recommended',
  ],

  plugins: ['prettier', 'simple-import-sort'],
  rules: {
    '@next/next/no-img-element': 'off',
    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'warn',
    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'warn',
    'prettier/prettier': ['error'],
    'react/jsx-curly-brace-presence': 'warn',
    'simple-import-sort/exports': 'error',
    'no-unused-vars': 'warn',
    'simple-import-sort/imports': 'error',
    // 'sort-keys': [
    //   'error',
    //   'asc',
    //   { caseSensitive: true, minKeys: 2, natural: false },
    // ],
  },
  ignorePatterns: ['src/shared/db/database.types.ts'],
  overrides: [
    {
      files: ['src/app/sw.ts'],
      env: {
        serviceworker: true,
      },
    },
    {
      files: ['public/sw.js', 'src/app/layout.tsx'],
      rules: {
        'no-console': 'off',
      },
    },
  ],
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env.local
.env.development.local
.env.test.local
.env.production.local

# vercel
.vercel
/cypress/videos/*
/cypress/screenshots/*
/.idea/inspectionProfiles/Project_Default.xml
!/public/service-worker.js
/reports/coverage/**
/test-results/
/playwright-report/
/blob-report/
/playwright/.cache/
/.idea/*
reports/
/public/sw.js
</file>

<file path="next.config.ts">
import withSerwistInit from '@serwist/next'
import type { NextConfig } from 'next'

const withSerwist = withSerwistInit({
  swSrc: 'src/app/sw.ts',
  swDest: 'public/sw.js',
  reloadOnOnline: true,
  // disable: process.env.NODE_ENV === 'development',
})

const nextConfig: NextConfig = {
  webpack: (config, { dev, isServer }) => {
    // This modification is to prevent the development server from
    // watching the generated service worker files, which can cause infinite loops.
    if (dev && !isServer) {
      // Get existing ignored paths, defaulting to an empty array.
      const existingIgnored = config.watchOptions.ignored ?? []
      const ignoredAsArray = Array.isArray(existingIgnored)
        ? existingIgnored
        : [existingIgnored]

      // Filter out any invalid values to satisfy the Webpack schema.
      // This prevents errors from empty strings or non-string values.
      const validIgnoredPaths = ignoredAsArray.filter(
        (path) => typeof path === 'string' && path.length > 0,
      )

      // Create a new watchOptions object with the combined valid paths.
      config.watchOptions = {
        ...config.watchOptions,
        ignored: [
          ...validIgnoredPaths,
          '**/public/sw.js',
          '**/public/sw.js.map',
        ],
      }
    }
    return config
  },
  poweredByHeader: false,
  images: {
    unoptimized: true,
    domains: ['www.metvuw.com'],
  },
  async headers() {
    return [
      {
        source: '/:path*',
        headers: [
          {
            key: 'Cache-Control',
            value: 'no-store, max-age=0',
          },
        ],
      },
    ]
  },
}

export default withSerwist(nextConfig)
</file>

<file path="src/components/FooterControl/index.tsx">
'use client'
import clsx from 'clsx'
import { AnimatePresence, motion } from 'framer-motion' // Import framer-motion
import { useAtom } from 'jotai/index'
import { ChangeEvent, useCallback, useMemo } from 'react'

import {
  animatedChartIndexAtom,
  displayAnimatedChartAtom,
  playAnimationAtom,
} from '@/components/Atoms/GlobalState'
import { useIsStandalone } from '@/components/Hooks/useIsStandalone'
import { SkinnyChartData } from '@/shared/helpers/v2/chartData/constructChartData'

// Icon components (PlayIcon, CrossIcon, PauseIcon) remain the same
function PlayIcon() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className="lg-size-5 size-5"
      viewBox="0 0 24 24"
      fill="currentColor"
    >
      <path d="M8 5v14l11-7z"></path>
    </svg>
  )
}

function CrossIcon() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className="lg-size-5 size-5"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={2}
        d="M6 18L18 6M6 6l12 12"
      />
    </svg>
  )
}
function PauseIcon() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className="lg-size-5 size-5"
      viewBox="0 0 24 24"
      fill="currentColor"
    >
      <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"></path>
    </svg>
  )
}

function FooterControl({ charts }: { charts: SkinnyChartData[] }) {
  const [playAnimation, setPlayAnimation] = useAtom(playAnimationAtom)
  const [displayAnimatedChart, setDisplayAnimatedChart] = useAtom(
    displayAnimatedChartAtom,
  )
  const [animatedChartIndex, setAnimatedChartIndex] = useAtom(
    animatedChartIndexAtom,
  )
  const isStandalone = useIsStandalone()

  const handleMasterPlay = useCallback(() => {
    if (displayAnimatedChart) {
      setPlayAnimation(false)
      setAnimatedChartIndex(0)
    } else {
      setPlayAnimation(true)
    }
    setDisplayAnimatedChart((prev) => !prev)
  }, [
    displayAnimatedChart,
    setPlayAnimation,
    setDisplayAnimatedChart,
    setAnimatedChartIndex,
  ])

  const handleProgressChange = (e: ChangeEvent<HTMLInputElement>) => {
    setAnimatedChartIndex(Number(e.target.value))
  }

  const max = useMemo(
    () => (charts && charts.length > 0 ? charts.length - 1 : 0),
    [charts],
  )

  const footerClasses = clsx(
    'sticky bottom-0 z-20 border-t border-gray-300 bg-gray-100 shadow-lg lg:p-3 dark:border-slate-700 dark:bg-slate-800',
    {
      'm:p-2 px-5 pt-3 pb-6': isStandalone,
      'p-2': !isStandalone,
    },
  )

  return (
    <footer className={footerClasses}>
      <div
        className={`container mx-auto flex flex-row items-center ${
          displayAnimatedChart
            ? 'justify-start space-x-4 lg:gap-5'
            : 'justify-center'
        }`}
      >
        <motion.button
          layout // This enables smooth animation when layout changes
          // For more control over the animation, you can add a transition prop:
          transition={{ type: 'tween', ease: 'easeInOut', duration: 0.5 }}
          onClick={handleMasterPlay}
          className="transform rounded-full bg-slate-700 p-3 text-sky-400 shadow-lg hover:scale-110 hover:bg-slate-600 focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:outline-none lg:p-4"
          aria-label={
            displayAnimatedChart
              ? 'Show static weather chart list'
              : 'Show animated weather chart'
          }
        >
          {displayAnimatedChart ? <CrossIcon /> : <PlayIcon />}
        </motion.button>

        <AnimatePresence>
          {displayAnimatedChart && (
            <motion.div
              key="additional-controls"
              className="flex w-2/3 flex-row items-center space-x-4 lg:gap-5"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              // Define a specific, quick transition for when the controls exit
              exit={{
                opacity: 0,
                x: -20,
                transition: { duration: 0.2 }, // Adjust duration as needed for exit
              }}
              // This transition applies to the "enter" animation (initial to animate)
              transition={{
                delay: 0.5, // Wait for the master button's 0.5s animation
                duration: 0.3, // Duration for these controls to fade/slide in
              }}
            >
              <button
                onClick={() => setPlayAnimation((prev) => !prev)}
                className="transform rounded-full bg-slate-700 p-3 text-sky-400 shadow-lg transition-all hover:scale-110 hover:bg-slate-600 focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:outline-none lg:p-4"
                aria-label={
                  playAnimation ? 'Pause animation' : 'Play animation'
                }
              >
                {playAnimation ? <PauseIcon /> : <PlayIcon />}
              </button>
              <input
                type="range"
                min="0"
                max={max}
                value={animatedChartIndex}
                onChange={handleProgressChange}
                aria-label="progress bar"
                className="w-full text-sky-400"
              />
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </footer>
  )
}
export { FooterControl }
</file>

<file path="src/components/RadarAndSatelliteImages/RadarAndSatelliteImages.tsx">
/* eslint-disable no-console */
'use client'
import { AnimatePresence, motion, Variants } from 'framer-motion'
import { useAtomValue } from 'jotai/index'

import { displayAnimatedChartAtom } from '@/components/Atoms/GlobalState'
import { AnimatedRadarAndSatelliteImageCard } from '@/components/RadarAndSatelliteImages/AnimatedRadarAndSatelliteImageCard'
import { RadarAndSatelliteImageCard } from '@/components/RadarAndSatelliteImages/RadarAndSatelliteImageCard'
import { SkinnyChartData } from '@/shared/helpers/v2/chartData/constructChartData'
import { ChartType } from '@/shared/types/ChartType'

interface Props {
  images: SkinnyChartData[]
  chartType: Extract<ChartType, 'Radar' | 'Satellite' | 'Upper Air'>
}

// Variants for the container of the static chart list to orchestrate staggered animations
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1, // Each child will animate 0.1s after the previous one
    },
  },
}

// Variants for each individual static chart item
const itemVariants: Variants = {
  hidden: { y: 20, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      ease: 'easeOut',
      duration: 0.5,
    },
  },
}

// Variants for the fade transition when switching between static and animated views
const viewSwitchVariants = {
  initial: { opacity: 0 },
  animate: { opacity: 1, transition: { duration: 0.5 } },
  exit: { opacity: 0, transition: { duration: 0.3 } },
}

export default function Foo({ images, chartType }: Props) {
  const displayAnimatedChart = useAtomValue(displayAnimatedChartAtom)

  return (
    <>
      <div className="relative flex h-full flex-1 flex-col items-center justify-center gap-2 pt-2">
        {/* AnimatePresence handles the transition between the two views */}
        <AnimatePresence mode="wait">
          {displayAnimatedChart ? (
            <motion.div
              key="animated-view" // Unique key is crucial for AnimatePresence
              variants={viewSwitchVariants}
              initial="initial"
              animate="animate"
              exit="exit"
              className="flex h-full w-full flex-col items-center"
            >
              <AnimatedRadarAndSatelliteImageCard
                images={images}
                chartType={chartType}
              />
            </motion.div>
          ) : (
            <motion.ul
              key="static-list" // Unique key
              className="mx-auto flex w-full max-w-2xl flex-col items-center px-2"
              variants={containerVariants}
              initial="hidden"
              animate="visible"
            >
              {images.map((image, index) => (
                // Each list item has its own animation variant
                <motion.li
                  key={image.url}
                  variants={itemVariants}
                  className="w-full"
                >
                  <RadarAndSatelliteImageCard
                    image={image}
                    chartType={chartType}
                    isHighPriority={index == 0}
                  />
                </motion.li>
              ))}
            </motion.ul>
          )}
        </AnimatePresence>
      </div>
    </>
  )
}
</file>

<file path="src/components/WeatherCharts/WeatherChartsWithAnimation.tsx">
'use client'
import { AnimatePresence, motion, Variants } from 'framer-motion'
import { useAtomValue } from 'jotai'

import { AnimatedWeatherChart } from '@/components/AnimatedWeatherChart/animated-weather-chart'
import { displayAnimatedChartAtom } from '@/components/Atoms/GlobalState'
import { SkinnyRainChartData } from '@/shared/types/rainChartData'
import { Region } from '@/shared/types/region'

import { WeatherChart } from './WeatherChart'

interface WeatherChartsProps {
  region: Region
  charts: SkinnyRainChartData[]
}

// Variants for the container of the static chart list to orchestrate staggered animations
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1, // Each child will animate 0.1s after the previous one
    },
  },
}

// Variants for each individual static chart item
const itemVariants: Variants = {
  hidden: { y: 20, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      ease: 'easeOut',
      duration: 0.5,
    },
  },
}

// Variants for the fade transition when switching between static and animated views
const viewSwitchVariants = {
  initial: { opacity: 0 },
  animate: { opacity: 1, transition: { duration: 0.5 } },
  exit: { opacity: 0, transition: { duration: 0.3 } },
}

const WeatherChartsWithAnimation = (props: WeatherChartsProps) => {
  const displayAnimatedChart = useAtomValue(displayAnimatedChartAtom)
  return (
    <>
      <div className="relative flex h-full flex-1 flex-col gap-2">
        {/* AnimatePresence handles the transition between the two views */}
        <AnimatePresence mode="wait">
          {displayAnimatedChart ? (
            <motion.div
              key="animated-view" // Unique key is crucial for AnimatePresence
              variants={viewSwitchVariants}
              initial="initial"
              animate="animate"
              exit="exit"
              className="flex w-full flex-grow flex-col items-center justify-center"
            >
              <AnimatedWeatherChart
                region={props.region}
                charts={props.charts}
              />
            </motion.div>
          ) : (
            <motion.ul
              key="static-list" // Unique key
              className="mx-auto flex w-full max-w-2xl flex-col items-center px-2 pt-2"
              variants={containerVariants}
              initial="hidden"
              animate="visible"
            >
              {props.charts.map((chart, index) => (
                // Each list item has its own animation variant
                <motion.li
                  key={chart.forecastDate}
                  variants={itemVariants}
                  className="w-full"
                >
                  <WeatherChart
                    chart={chart}
                    region={props.region}
                    index={index}
                  />
                </motion.li>
              ))}
            </motion.ul>
          )}
        </AnimatePresence>
      </div>
    </>
  )
}

export default WeatherChartsWithAnimation
</file>

<file path="src/components/WeatherImage/__snapshots__/WeatherImage.test.tsx.snap">
// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Weather Image > it should render correctly 1`] = `
<div>
  <div
    class="w-full"
    data-testid="weather-image"
  >
    <img
      alt="foo"
      fetchpriority="low"
      height="396"
      src="baa"
      style="display: block; width: 100%; max-width: 100%; height: auto;"
      width="565"
    />
  </div>
</div>
`;
</file>

<file path="src/app/layout.tsx">
'use client'
import './globals.css'

import { Provider } from 'jotai'
import React from 'react'
import { Toaster } from 'react-hot-toast'

import GoogleTag from '@/components/GoogleTag'
import { config } from '@/config'

import Navbar from '../components/Navbar'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className="bg-gray-100">
      <head>
        <title>Metvuw Mobile</title>
        <link rel="manifest" href="/manifest.json" />
        <link rel="preconnect" href={config.supabaseUrl} />
      </head>
      <GoogleTag />
      <body className="font-sans text-gray-800">
        <Toaster />
        <div className="font-sans text-gray-800">
          <Provider>
            <header className="sticky top-0 z-30 bg-white shadow-md">
              <Navbar />
            </header>
            <main className="mx-auto dark:bg-stone-600 dark:text-stone-100">
              {children}
            </main>
          </Provider>
        </div>
      </body>
    </html>
  )
}
</file>

<file path="package.json">
{
  "name": "metvuw-mobile",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev -p 3002",
    "prod": "rm -rf ./.next && npm run build && npm run start",
    "build": "next build",
    "start": "next start -p 3002",
    "lint": "next lint",
    "lint:fix": "next lint --fix",
    "test": "vitest",
    "test:watch": "vitest --ui",
    "test:ci": "vitest run --reporter=junit --outputFile.junit=reports/junit.xml",
    "e2e": "npx playwright test",
    "e2e:interactive": "npx playwright test --ui",
    "checkly:test": "npx checkly test",
    "checkly:deploy": "npx checkly deploy",
    "db:local:generate:types": "supabase gen types typescript --local  > ./src/shared/db/database.types.ts ",
    "db:local:start": "supabase start",
    "db:local:stop": "supabase stop",
    "db:local:migrate": "supabase db reset",
    "inggest:dev": "npx inngest-cli@latest dev"
  },
  "dependencies": {
    "@baselime/node-opentelemetry": "0.5.8",
    "@heroicons/react": "2.2.0",
    "@serwist/next": "^9.0.15",
    "@supabase/supabase-js": "^2.40.0",
    "axios": "1.10.0",
    "cheerio": "1.1.1",
    "clsx": "^2.1.0",
    "date-fns": "4.1.0",
    "framer-motion": "^12.16.0",
    "inngest": "^3.16.1",
    "jotai": "2.12.5",
    "next": "15.4.2",
    "prop-types": "15.8.1",
    "react": "19.1.0",
    "react-aria-components": "^1.7.1",
    "react-dom": "19.1.0",
    "react-hot-toast": "^2.5.2",
    "react-lazy-load-image-component": "1.6.3",
    "serwist": "^9.0.15",
    "sharp": "^0.34.0"
  },
  "devDependencies": {
    "@axe-core/playwright": "4.10.2",
    "@playwright/test": "1.54.1",
    "@tailwindcss/postcss": "^4.0.0",
    "@testing-library/jest-dom": "6.6.3",
    "@testing-library/react": "16.3.0",
    "@types/jest": "30.0.0",
    "@types/node": "22.16.5",
    "@types/react": "19.1.8",
    "@types/react-lazy-load-image-component": "1.6.4",
    "@types/react-lazyload": "3.2.3",
    "@vitejs/plugin-react": "^4.6.0",
    "@vitest/ui": "^3.2.4",
    "babel-jest": "30.0.4",
    "checkly": "^6.0.0",
    "dotenv": "^17.2.0",
    "eslint": "9.31.0",
    "eslint-config-next": "15.4.2",
    "eslint-config-prettier": "10.1.8",
    "eslint-plugin-prettier": "5.5.3",
    "eslint-plugin-simple-import-sort": "^12.0.0",
    "identity-obj-proxy": "3.0.0",
    "jest": "30.0.4",
    "jest-environment-jsdom": "30.0.4",
    "jest-junit": "16.0.0",
    "jsdom": "^26.1.0",
    "postcss": "8.5.6",
    "prettier": "3.6.2",
    "prettier-plugin-tailwindcss": "^0.6.11",
    "supabase": "^2.24.3",
    "tailwindcss": "^4.0.0",
    "ts-node": "latest",
    "typescript": "latest",
    "typescript-eslint": "^8.0.0",
    "vite": "^7.0.4",
    "vitest": "^3.2.4"
  }
}
</file>

</files>
